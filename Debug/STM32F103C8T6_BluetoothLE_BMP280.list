
STM32F103C8T6_BluetoothLE_BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ca4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006db8  08006db8  00016db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e48  08006e48  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006e48  08006e48  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e48  08006e48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e4c  08006e4c  00016e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  08006ec0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08006ec0  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8ff  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209e  00000000  00000000  0002e998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00030a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00031938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182d2  00000000  00000000  00032798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d65  00000000  00000000  0004aa6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c659  00000000  00000000  0005b7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7e28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004814  00000000  00000000  000e7e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d9c 	.word	0x08006d9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006d9c 	.word	0x08006d9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <I2C_Read_Register>:
unsigned short dig_T1, dig_P1;
signed short dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
float temperature, pressure, altitude, init_height;

uint8_t I2C_Read_Register(uint8_t device_adr, uint8_t internal_adr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buff[1];
	uint8_t rx_buff[1];

	tx_buff[0] = internal_adr;
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, &tx_buff[0], 1, 10000);
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	b299      	uxth	r1, r3
 8001160:	f107 020c 	add.w	r2, r7, #12
 8001164:	f242 7310 	movw	r3, #10000	; 0x2710
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <I2C_Read_Register+0x50>)
 800116e:	f001 fe57 	bl	8002e20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_adr + 1, &rx_buff[0], 1, 10000);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	b29b      	uxth	r3, r3
 8001176:	3301      	adds	r3, #1
 8001178:	b299      	uxth	r1, r3
 800117a:	f107 0208 	add.w	r2, r7, #8
 800117e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	4804      	ldr	r0, [pc, #16]	; (8001198 <I2C_Read_Register+0x50>)
 8001188:	f001 ff48 	bl	800301c <HAL_I2C_Master_Receive>


	return rx_buff[0];
 800118c:	7a3b      	ldrb	r3, [r7, #8]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000b8 	.word	0x200000b8

0800119c <I2C_Write_Register>:

void I2C_Write_Register(uint8_t device_adr, uint8_t internal_adr, uint8_t data)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	460b      	mov	r3, r1
 80011a8:	71bb      	strb	r3, [r7, #6]
 80011aa:	4613      	mov	r3, r2
 80011ac:	717b      	strb	r3, [r7, #5]
	uint8_t tx_buff[2];

	tx_buff[0] = internal_adr;
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	733b      	strb	r3, [r7, #12]
	tx_buff[1] = data;
 80011b2:	797b      	ldrb	r3, [r7, #5]
 80011b4:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, device_adr, tx_buff, 2, 10000);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	b299      	uxth	r1, r3
 80011ba:	f107 020c 	add.w	r2, r7, #12
 80011be:	f242 7310 	movw	r3, #10000	; 0x2710
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2302      	movs	r3, #2
 80011c6:	4803      	ldr	r0, [pc, #12]	; (80011d4 <I2C_Write_Register+0x38>)
 80011c8:	f001 fe2a 	bl	8002e20 <HAL_I2C_Master_Transmit>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200000b8 	.word	0x200000b8

080011d8 <BMP280_get_calib_values>:

void BMP280_get_calib_values(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af02      	add	r7, sp, #8
	uint8_t rx_buff[24], starting_address=0x88;
 80011de:	2388      	movs	r3, #136	; 0x88
 80011e0:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_dev_address, &starting_address, 1, 10000);
 80011e2:	1dfa      	adds	r2, r7, #7
 80011e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	21ee      	movs	r1, #238	; 0xee
 80011ee:	4849      	ldr	r0, [pc, #292]	; (8001314 <BMP280_get_calib_values+0x13c>)
 80011f0:	f001 fe16 	bl	8002e20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_dev_address + 1, &rx_buff[0], 24, 10000);
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2318      	movs	r3, #24
 8001200:	21ef      	movs	r1, #239	; 0xef
 8001202:	4844      	ldr	r0, [pc, #272]	; (8001314 <BMP280_get_calib_values+0x13c>)
 8001204:	f001 ff0a 	bl	800301c <HAL_I2C_Master_Receive>

	dig_T1=(rx_buff[0])+(rx_buff[1]<<8);
 8001208:	7a3b      	ldrb	r3, [r7, #8]
 800120a:	b29a      	uxth	r2, r3
 800120c:	7a7b      	ldrb	r3, [r7, #9]
 800120e:	b29b      	uxth	r3, r3
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b29b      	uxth	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <BMP280_get_calib_values+0x140>)
 800121a:	801a      	strh	r2, [r3, #0]
	dig_T2=(rx_buff[2])+(rx_buff[3]<<8);
 800121c:	7abb      	ldrb	r3, [r7, #10]
 800121e:	b29a      	uxth	r2, r3
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	b29b      	uxth	r3, r3
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b29b      	uxth	r3, r3
 8001228:	4413      	add	r3, r2
 800122a:	b29b      	uxth	r3, r3
 800122c:	b21a      	sxth	r2, r3
 800122e:	4b3b      	ldr	r3, [pc, #236]	; (800131c <BMP280_get_calib_values+0x144>)
 8001230:	801a      	strh	r2, [r3, #0]
	dig_T3=(rx_buff[4])+(rx_buff[5]<<8);
 8001232:	7b3b      	ldrb	r3, [r7, #12]
 8001234:	b29a      	uxth	r2, r3
 8001236:	7b7b      	ldrb	r3, [r7, #13]
 8001238:	b29b      	uxth	r3, r3
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b29b      	uxth	r3, r3
 800123e:	4413      	add	r3, r2
 8001240:	b29b      	uxth	r3, r3
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b36      	ldr	r3, [pc, #216]	; (8001320 <BMP280_get_calib_values+0x148>)
 8001246:	801a      	strh	r2, [r3, #0]
	dig_P1=(rx_buff[6])+(rx_buff[7]<<8);
 8001248:	7bbb      	ldrb	r3, [r7, #14]
 800124a:	b29a      	uxth	r2, r3
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	b29b      	uxth	r3, r3
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b29b      	uxth	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b32      	ldr	r3, [pc, #200]	; (8001324 <BMP280_get_calib_values+0x14c>)
 800125a:	801a      	strh	r2, [r3, #0]
	dig_P2=(rx_buff[8])+(rx_buff[9]<<8);
 800125c:	7c3b      	ldrb	r3, [r7, #16]
 800125e:	b29a      	uxth	r2, r3
 8001260:	7c7b      	ldrb	r3, [r7, #17]
 8001262:	b29b      	uxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b29b      	uxth	r3, r3
 8001268:	4413      	add	r3, r2
 800126a:	b29b      	uxth	r3, r3
 800126c:	b21a      	sxth	r2, r3
 800126e:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <BMP280_get_calib_values+0x150>)
 8001270:	801a      	strh	r2, [r3, #0]
	dig_P3=(rx_buff[10])+(rx_buff[11]<<8);
 8001272:	7cbb      	ldrb	r3, [r7, #18]
 8001274:	b29a      	uxth	r2, r3
 8001276:	7cfb      	ldrb	r3, [r7, #19]
 8001278:	b29b      	uxth	r3, r3
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b29b      	uxth	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b29b      	uxth	r3, r3
 8001282:	b21a      	sxth	r2, r3
 8001284:	4b29      	ldr	r3, [pc, #164]	; (800132c <BMP280_get_calib_values+0x154>)
 8001286:	801a      	strh	r2, [r3, #0]
	dig_P4=(rx_buff[12])+(rx_buff[13]<<8);
 8001288:	7d3b      	ldrb	r3, [r7, #20]
 800128a:	b29a      	uxth	r2, r3
 800128c:	7d7b      	ldrb	r3, [r7, #21]
 800128e:	b29b      	uxth	r3, r3
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <BMP280_get_calib_values+0x158>)
 800129c:	801a      	strh	r2, [r3, #0]
	dig_P5=(rx_buff[14])+(rx_buff[15]<<8);
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4b20      	ldr	r3, [pc, #128]	; (8001334 <BMP280_get_calib_values+0x15c>)
 80012b2:	801a      	strh	r2, [r3, #0]
	dig_P6=(rx_buff[16])+(rx_buff[17]<<8);
 80012b4:	7e3b      	ldrb	r3, [r7, #24]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	7e7b      	ldrb	r3, [r7, #25]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4413      	add	r3, r2
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <BMP280_get_calib_values+0x160>)
 80012c8:	801a      	strh	r2, [r3, #0]
	dig_P7=(rx_buff[18])+(rx_buff[19]<<8);
 80012ca:	7ebb      	ldrb	r3, [r7, #26]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	7efb      	ldrb	r3, [r7, #27]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <BMP280_get_calib_values+0x164>)
 80012de:	801a      	strh	r2, [r3, #0]
	dig_P8=(rx_buff[20])+(rx_buff[21]<<8);
 80012e0:	7f3b      	ldrb	r3, [r7, #28]
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	7f7b      	ldrb	r3, [r7, #29]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	4413      	add	r3, r2
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <BMP280_get_calib_values+0x168>)
 80012f4:	801a      	strh	r2, [r3, #0]
	dig_P9=(rx_buff[22])+(rx_buff[23]<<8);
 80012f6:	7fbb      	ldrb	r3, [r7, #30]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	7ffb      	ldrb	r3, [r7, #31]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b29b      	uxth	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b29b      	uxth	r3, r3
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <BMP280_get_calib_values+0x16c>)
 800130a:	801a      	strh	r2, [r3, #0]
}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200000b8 	.word	0x200000b8
 8001318:	20000094 	.word	0x20000094
 800131c:	20000098 	.word	0x20000098
 8001320:	2000009a 	.word	0x2000009a
 8001324:	20000096 	.word	0x20000096
 8001328:	2000009c 	.word	0x2000009c
 800132c:	2000009e 	.word	0x2000009e
 8001330:	200000a0 	.word	0x200000a0
 8001334:	200000a2 	.word	0x200000a2
 8001338:	200000a4 	.word	0x200000a4
 800133c:	200000a6 	.word	0x200000a6
 8001340:	200000a8 	.word	0x200000a8
 8001344:	200000aa 	.word	0x200000aa

08001348 <BMP280_init>:

void BMP280_init(uint8_t register_F4, uint8_t register_F5)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
	I2C_Write_Register(BMP280_dev_address, 0xF4, register_F4);// osrs_t 010 x2, osrs_p 16 101, mode normal 11
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	461a      	mov	r2, r3
 800135c:	21f4      	movs	r1, #244	; 0xf4
 800135e:	20ee      	movs	r0, #238	; 0xee
 8001360:	f7ff ff1c 	bl	800119c <I2C_Write_Register>
	I2C_Write_Register(BMP280_dev_address, 0xF5, register_F5);// standby time 500ms 100, filter 16 100, SPI DIS 0
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	461a      	mov	r2, r3
 8001368:	21f5      	movs	r1, #245	; 0xf5
 800136a:	20ee      	movs	r0, #238	; 0xee
 800136c:	f7ff ff16 	bl	800119c <I2C_Write_Register>

	BMP280_get_calib_values();
 8001370:	f7ff ff32 	bl	80011d8 <BMP280_get_calib_values>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	0000      	movs	r0, r0
	...

08001380 <BMP280_calc_values>:

void BMP280_calc_values(void)
{
 8001380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001384:	b094      	sub	sp, #80	; 0x50
 8001386:	af02      	add	r7, sp, #8
	uint8_t status, rx_buff[6], starting_address=0xF7;
 8001388:	23f7      	movs	r3, #247	; 0xf7
 800138a:	77fb      	strb	r3, [r7, #31]

	do
	{
		status=I2C_Read_Register(BMP280_dev_address, 0xF3);
 800138c:	21f3      	movs	r1, #243	; 0xf3
 800138e:	20ee      	movs	r0, #238	; 0xee
 8001390:	f7ff feda 	bl	8001148 <I2C_Read_Register>
 8001394:	4603      	mov	r3, r0
 8001396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	} while(((status&0b00001000)==8)||((status&0b00000001)==1));
 800139a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f2      	bne.n	800138c <BMP280_calc_values+0xc>
 80013a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ec      	bne.n	800138c <BMP280_calc_values+0xc>

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_dev_address, &starting_address, 1, 10000);
 80013b2:	f107 021f 	add.w	r2, r7, #31
 80013b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	21ee      	movs	r1, #238	; 0xee
 80013c0:	48ce      	ldr	r0, [pc, #824]	; (80016fc <BMP280_calc_values+0x37c>)
 80013c2:	f001 fd2d 	bl	8002e20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_dev_address + 1, &rx_buff[0], 6, 10000);
 80013c6:	f107 0220 	add.w	r2, r7, #32
 80013ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2306      	movs	r3, #6
 80013d2:	21ef      	movs	r1, #239	; 0xef
 80013d4:	48c9      	ldr	r0, [pc, #804]	; (80016fc <BMP280_calc_values+0x37c>)
 80013d6:	f001 fe21 	bl	800301c <HAL_I2C_Master_Receive>

	volatile uint32_t temp[3];
	temp[2]=rx_buff[3];
 80013da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013de:	61bb      	str	r3, [r7, #24]
	temp[1]=rx_buff[4];
 80013e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013e4:	617b      	str	r3, [r7, #20]
	temp[0]=rx_buff[5];
 80013e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013ea:	613b      	str	r3, [r7, #16]
	temperature_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	031a      	lsls	r2, r3, #12
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	441a      	add	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4bc0      	ldr	r3, [pc, #768]	; (8001700 <BMP280_calc_values+0x380>)
 8001400:	601a      	str	r2, [r3, #0]

	temp[2]=rx_buff[0];
 8001402:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001406:	61bb      	str	r3, [r7, #24]
	temp[1]=rx_buff[1];
 8001408:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800140c:	617b      	str	r3, [r7, #20]
	temp[0]=rx_buff[2];
 800140e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001412:	613b      	str	r3, [r7, #16]
	pressure_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	031a      	lsls	r2, r3, #12
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	441a      	add	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	091b      	lsrs	r3, r3, #4
 8001422:	4413      	add	r3, r2
 8001424:	461a      	mov	r2, r3
 8001426:	4bb7      	ldr	r3, [pc, #732]	; (8001704 <BMP280_calc_values+0x384>)
 8001428:	601a      	str	r2, [r3, #0]

	double var1, var2;
	var1=(((double)temperature_raw)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
 800142a:	4bb5      	ldr	r3, [pc, #724]	; (8001700 <BMP280_calc_values+0x380>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe ffe8 	bl	8000404 <__aeabi_i2d>
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	4bb3      	ldr	r3, [pc, #716]	; (8001708 <BMP280_calc_values+0x388>)
 800143a:	f7ff f977 	bl	800072c <__aeabi_ddiv>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4614      	mov	r4, r2
 8001444:	461d      	mov	r5, r3
 8001446:	4bb1      	ldr	r3, [pc, #708]	; (800170c <BMP280_calc_values+0x38c>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe ffca 	bl	80003e4 <__aeabi_ui2d>
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	4bae      	ldr	r3, [pc, #696]	; (8001710 <BMP280_calc_values+0x390>)
 8001456:	f7ff f969 	bl	800072c <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4620      	mov	r0, r4
 8001460:	4629      	mov	r1, r5
 8001462:	f7fe fe81 	bl	8000168 <__aeabi_dsub>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4614      	mov	r4, r2
 800146c:	461d      	mov	r5, r3
 800146e:	4ba9      	ldr	r3, [pc, #676]	; (8001714 <BMP280_calc_values+0x394>)
 8001470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe ffc5 	bl	8000404 <__aeabi_i2d>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4620      	mov	r0, r4
 8001480:	4629      	mov	r1, r5
 8001482:	f7ff f829 	bl	80004d8 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2=((((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)dig_T1)/8192.0))*((double)dig_T3);
 800148e:	4b9c      	ldr	r3, [pc, #624]	; (8001700 <BMP280_calc_values+0x380>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe ffb6 	bl	8000404 <__aeabi_i2d>
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80014a0:	f7ff f944 	bl	800072c <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4614      	mov	r4, r2
 80014aa:	461d      	mov	r5, r3
 80014ac:	4b97      	ldr	r3, [pc, #604]	; (800170c <BMP280_calc_values+0x38c>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe ff97 	bl	80003e4 <__aeabi_ui2d>
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4b97      	ldr	r3, [pc, #604]	; (8001718 <BMP280_calc_values+0x398>)
 80014bc:	f7ff f936 	bl	800072c <__aeabi_ddiv>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7fe fe4e 	bl	8000168 <__aeabi_dsub>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4614      	mov	r4, r2
 80014d2:	461d      	mov	r5, r3
 80014d4:	4b8a      	ldr	r3, [pc, #552]	; (8001700 <BMP280_calc_values+0x380>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ff93 	bl	8000404 <__aeabi_i2d>
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80014e6:	f7ff f921 	bl	800072c <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4690      	mov	r8, r2
 80014f0:	4699      	mov	r9, r3
 80014f2:	4b86      	ldr	r3, [pc, #536]	; (800170c <BMP280_calc_values+0x38c>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe ff74 	bl	80003e4 <__aeabi_ui2d>
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	4b85      	ldr	r3, [pc, #532]	; (8001718 <BMP280_calc_values+0x398>)
 8001502:	f7ff f913 	bl	800072c <__aeabi_ddiv>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4640      	mov	r0, r8
 800150c:	4649      	mov	r1, r9
 800150e:	f7fe fe2b 	bl	8000168 <__aeabi_dsub>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4620      	mov	r0, r4
 8001518:	4629      	mov	r1, r5
 800151a:	f7fe ffdd 	bl	80004d8 <__aeabi_dmul>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4614      	mov	r4, r2
 8001524:	461d      	mov	r5, r3
 8001526:	4b7d      	ldr	r3, [pc, #500]	; (800171c <BMP280_calc_values+0x39c>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff69 	bl	8000404 <__aeabi_i2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4620      	mov	r0, r4
 8001538:	4629      	mov	r1, r5
 800153a:	f7fe ffcd 	bl	80004d8 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double t_fine = (int32_t)(var1+var2);
 8001546:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800154a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800154e:	f7fe fe0d 	bl	800016c <__adddf3>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fa6d 	bl	8000a38 <__aeabi_d2iz>
 800155e:	4603      	mov	r3, r0
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff4f 	bl	8000404 <__aeabi_i2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
volatile	float T = (var1+var2)/5120.0;
 800156e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001572:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001576:	f7fe fdf9 	bl	800016c <__adddf3>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4b66      	ldr	r3, [pc, #408]	; (8001720 <BMP280_calc_values+0x3a0>)
 8001588:	f7ff f8d0 	bl	800072c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff fa78 	bl	8000a88 <__aeabi_d2f>
 8001598:	4603      	mov	r3, r0
 800159a:	60fb      	str	r3, [r7, #12]

	var1=((double)t_fine/2.0)-64000.0;
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015a8:	f7ff f8c0 	bl	800072c <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	4b5a      	ldr	r3, [pc, #360]	; (8001724 <BMP280_calc_values+0x3a4>)
 80015ba:	f7fe fdd5 	bl	8000168 <__aeabi_dsub>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2=var1*var1*((double)dig_P6)/32768.0;
 80015c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80015ce:	f7fe ff83 	bl	80004d8 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4614      	mov	r4, r2
 80015d8:	461d      	mov	r5, r3
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <BMP280_calc_values+0x3a8>)
 80015dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff0f 	bl	8000404 <__aeabi_i2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4620      	mov	r0, r4
 80015ec:	4629      	mov	r1, r5
 80015ee:	f7fe ff73 	bl	80004d8 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b4b      	ldr	r3, [pc, #300]	; (800172c <BMP280_calc_values+0x3ac>)
 8001600:	f7ff f894 	bl	800072c <__aeabi_ddiv>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2=var2+var1*((double)dig_P5)*2.0;
 800160c:	4b48      	ldr	r3, [pc, #288]	; (8001730 <BMP280_calc_values+0x3b0>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe fef6 	bl	8000404 <__aeabi_i2d>
 8001618:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800161c:	f7fe ff5c 	bl	80004d8 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	f7fe fd9e 	bl	800016c <__adddf3>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001638:	f7fe fd98 	bl	800016c <__adddf3>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2=(var2/4.0)+(((double)dig_P4)*65536.0);
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <BMP280_calc_values+0x3b4>)
 800164a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800164e:	f7ff f86d 	bl	800072c <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4614      	mov	r4, r2
 8001658:	461d      	mov	r5, r3
 800165a:	4b37      	ldr	r3, [pc, #220]	; (8001738 <BMP280_calc_values+0x3b8>)
 800165c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fecf 	bl	8000404 <__aeabi_i2d>
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <BMP280_calc_values+0x3bc>)
 800166c:	f7fe ff34 	bl	80004d8 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4620      	mov	r0, r4
 8001676:	4629      	mov	r1, r5
 8001678:	f7fe fd78 	bl	800016c <__adddf3>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var1=(((double)dig_P3)*var1*var1/524288.0+((double)dig_P2)*var1)/524288.0;
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <BMP280_calc_values+0x3c0>)
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe feba 	bl	8000404 <__aeabi_i2d>
 8001690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001694:	f7fe ff20 	bl	80004d8 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016a4:	f7fe ff18 	bl	80004d8 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <BMP280_calc_values+0x3c4>)
 80016b6:	f7ff f839 	bl	800072c <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <BMP280_calc_values+0x3c8>)
 80016c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe fe9b 	bl	8000404 <__aeabi_i2d>
 80016ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016d2:	f7fe ff01 	bl	80004d8 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4620      	mov	r0, r4
 80016dc:	4629      	mov	r1, r5
 80016de:	f7fe fd45 	bl	800016c <__adddf3>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <BMP280_calc_values+0x3c4>)
 80016f0:	f7ff f81c 	bl	800072c <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	e028      	b.n	800174c <BMP280_calc_values+0x3cc>
 80016fa:	bf00      	nop
 80016fc:	200000b8 	.word	0x200000b8
 8001700:	2000008c 	.word	0x2000008c
 8001704:	20000090 	.word	0x20000090
 8001708:	40d00000 	.word	0x40d00000
 800170c:	20000094 	.word	0x20000094
 8001710:	40900000 	.word	0x40900000
 8001714:	20000098 	.word	0x20000098
 8001718:	40c00000 	.word	0x40c00000
 800171c:	2000009a 	.word	0x2000009a
 8001720:	40b40000 	.word	0x40b40000
 8001724:	40ef4000 	.word	0x40ef4000
 8001728:	200000a4 	.word	0x200000a4
 800172c:	40e00000 	.word	0x40e00000
 8001730:	200000a2 	.word	0x200000a2
 8001734:	40100000 	.word	0x40100000
 8001738:	200000a0 	.word	0x200000a0
 800173c:	40f00000 	.word	0x40f00000
 8001740:	2000009e 	.word	0x2000009e
 8001744:	41200000 	.word	0x41200000
 8001748:	2000009c 	.word	0x2000009c
 800174c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var1=(1.0+var1/32768.0)*((double)dig_P1);
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	4b72      	ldr	r3, [pc, #456]	; (8001920 <BMP280_calc_values+0x5a0>)
 8001756:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800175a:	f7fe ffe7 	bl	800072c <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4b6e      	ldr	r3, [pc, #440]	; (8001924 <BMP280_calc_values+0x5a4>)
 800176c:	f7fe fcfe 	bl	800016c <__adddf3>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4614      	mov	r4, r2
 8001776:	461d      	mov	r5, r3
 8001778:	4b6b      	ldr	r3, [pc, #428]	; (8001928 <BMP280_calc_values+0x5a8>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fe31 	bl	80003e4 <__aeabi_ui2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f7fe fea5 	bl	80004d8 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
volatile	double p=1048576.0-(double)pressure_raw;
 8001796:	4b65      	ldr	r3, [pc, #404]	; (800192c <BMP280_calc_values+0x5ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe32 	bl	8000404 <__aeabi_i2d>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	f04f 0000 	mov.w	r0, #0
 80017a8:	4961      	ldr	r1, [pc, #388]	; (8001930 <BMP280_calc_values+0x5b0>)
 80017aa:	f7fe fcdd 	bl	8000168 <__aeabi_dsub>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	e9c7 2300 	strd	r2, r3, [r7]
	p=(p-(var2/4096.0))*6250.0/var1;
 80017b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b5d      	ldr	r3, [pc, #372]	; (8001934 <BMP280_calc_values+0x5b4>)
 80017c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017c4:	f7fe ffb2 	bl	800072c <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4620      	mov	r0, r4
 80017ce:	4629      	mov	r1, r5
 80017d0:	f7fe fcca 	bl	8000168 <__aeabi_dsub>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	a34e      	add	r3, pc, #312	; (adr r3, 8001918 <BMP280_calc_values+0x598>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe fe79 	bl	80004d8 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017f2:	f7fe ff9b 	bl	800072c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	e9c7 2300 	strd	r2, r3, [r7]
	var1=((double)dig_P9)*p*p/2147483648.0;
 80017fe:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <BMP280_calc_values+0x5b8>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fdfd 	bl	8000404 <__aeabi_i2d>
 800180a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800180e:	f7fe fe63 	bl	80004d8 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800181e:	f7fe fe5b 	bl	80004d8 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <BMP280_calc_values+0x5bc>)
 8001830:	f7fe ff7c 	bl	800072c <__aeabi_ddiv>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2=p*((double)dig_P8)/32768.0;
 800183c:	4b40      	ldr	r3, [pc, #256]	; (8001940 <BMP280_calc_values+0x5c0>)
 800183e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fdde 	bl	8000404 <__aeabi_i2d>
 8001848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800184c:	f7fe fe44 	bl	80004d8 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b30      	ldr	r3, [pc, #192]	; (8001920 <BMP280_calc_values+0x5a0>)
 800185e:	f7fe ff65 	bl	800072c <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	p=p+(var1+var2+((double)dig_P7))/16.0;
 800186a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800186e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001872:	f7fe fc7b 	bl	800016c <__adddf3>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4614      	mov	r4, r2
 800187c:	461d      	mov	r5, r3
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <BMP280_calc_values+0x5c4>)
 8001880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fdbd 	bl	8000404 <__aeabi_i2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7fe fc6b 	bl	800016c <__adddf3>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	4b29      	ldr	r3, [pc, #164]	; (8001948 <BMP280_calc_values+0x5c8>)
 80018a4:	f7fe ff42 	bl	800072c <__aeabi_ddiv>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018b4:	f7fe fc5a 	bl	800016c <__adddf3>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	e9c7 2300 	strd	r2, r3, [r7]

	temperature=T;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4a22      	ldr	r2, [pc, #136]	; (800194c <BMP280_calc_values+0x5cc>)
 80018c4:	6013      	str	r3, [r2, #0]
	pressure=p;
 80018c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f8db 	bl	8000a88 <__aeabi_d2f>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <BMP280_calc_values+0x5d0>)
 80018d6:	6013      	str	r3, [r2, #0]
	altitude=44330.0f*(1-powf(pressure/101325.0f,1.0f/5.255f));//altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <BMP280_calc_values+0x5d0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	491d      	ldr	r1, [pc, #116]	; (8001954 <BMP280_calc_values+0x5d4>)
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fae4 	bl	8000eac <__aeabi_fdiv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	491c      	ldr	r1, [pc, #112]	; (8001958 <BMP280_calc_values+0x5d8>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 ff5d 	bl	80057a8 <powf>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80018f6:	f7ff f91b 	bl	8000b30 <__aeabi_fsub>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4917      	ldr	r1, [pc, #92]	; (800195c <BMP280_calc_values+0x5dc>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fa20 	bl	8000d44 <__aeabi_fmul>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <BMP280_calc_values+0x5e0>)
 800190a:	601a      	str	r2, [r3, #0]
}
 800190c:	bf00      	nop
 800190e:	3748      	adds	r7, #72	; 0x48
 8001910:	46bd      	mov	sp, r7
 8001912:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001916:	bf00      	nop
 8001918:	00000000 	.word	0x00000000
 800191c:	40b86a00 	.word	0x40b86a00
 8001920:	40e00000 	.word	0x40e00000
 8001924:	3ff00000 	.word	0x3ff00000
 8001928:	20000096 	.word	0x20000096
 800192c:	20000090 	.word	0x20000090
 8001930:	41300000 	.word	0x41300000
 8001934:	40b00000 	.word	0x40b00000
 8001938:	200000aa 	.word	0x200000aa
 800193c:	41e00000 	.word	0x41e00000
 8001940:	200000a8 	.word	0x200000a8
 8001944:	200000a6 	.word	0x200000a6
 8001948:	40300000 	.word	0x40300000
 800194c:	200000ac 	.word	0x200000ac
 8001950:	200000b0 	.word	0x200000b0
 8001954:	47c5e680 	.word	0x47c5e680
 8001958:	3e42dcae 	.word	0x3e42dcae
 800195c:	472d2a00 	.word	0x472d2a00
 8001960:	200000b4 	.word	0x200000b4

08001964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001968:	f000 fd36 	bl	80023d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196c:	f000 f83c 	bl	80019e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001970:	f000 f926 	bl	8001bc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001974:	f000 f8fa 	bl	8001b6c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001978:	f000 f87c 	bl	8001a74 <MX_I2C1_Init>
  MX_TIM2_Init();
 800197c:	f000 f8a8 	bl	8001ad0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 8001980:	20c8      	movs	r0, #200	; 0xc8
 8001982:	f000 fd8b 	bl	800249c <HAL_Delay>
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET);
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800198c:	4811      	ldr	r0, [pc, #68]	; (80019d4 <main+0x70>)
 800198e:	f001 f8eb 	bl	8002b68 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001996:	f000 fd81 	bl	800249c <HAL_Delay>
  HAL_UART_Transmit(&huart2, (uint8_t*)"AT+NAMEBMP280", strlen("AT+NAMEBMP280"), 500);
 800199a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800199e:	220d      	movs	r2, #13
 80019a0:	490d      	ldr	r1, [pc, #52]	; (80019d8 <main+0x74>)
 80019a2:	480e      	ldr	r0, [pc, #56]	; (80019dc <main+0x78>)
 80019a4:	f003 f931 	bl	8004c0a <HAL_UART_Transmit>
  memset(buffer, 0, sizeof(buffer));
 80019a8:	2232      	movs	r2, #50	; 0x32
 80019aa:	2100      	movs	r1, #0
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <main+0x7c>)
 80019ae:	f003 fe83 	bl	80056b8 <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 80019b2:	480c      	ldr	r0, [pc, #48]	; (80019e4 <main+0x80>)
 80019b4:	f002 fd28 	bl	8004408 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <main+0x78>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <main+0x78>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0220 	orr.w	r2, r2, #32
 80019c6:	60da      	str	r2, [r3, #12]
  BMP280_init(F4_osrs_t_oversampling16|
 80019c8:	210a      	movs	r1, #10
 80019ca:	20b7      	movs	r0, #183	; 0xb7
 80019cc:	f7ff fcbc 	bl	8001348 <BMP280_init>
			  F5_spi4w_en);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <main+0x6c>
 80019d2:	bf00      	nop
 80019d4:	40011000 	.word	0x40011000
 80019d8:	08006db8 	.word	0x08006db8
 80019dc:	20000154 	.word	0x20000154
 80019e0:	20000198 	.word	0x20000198
 80019e4:	2000010c 	.word	0x2000010c

080019e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b090      	sub	sp, #64	; 0x40
 80019ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ee:	f107 0318 	add.w	r3, r7, #24
 80019f2:	2228      	movs	r2, #40	; 0x28
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fe5e 	bl	80056b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 f87f 	bl	8003b34 <HAL_RCC_OscConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a3c:	f000 f91e 	bl	8001c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a40:	230f      	movs	r3, #15
 8001a42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a44:	2302      	movs	r3, #2
 8001a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a56:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 faeb 	bl	8004038 <HAL_RCC_ClockConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a68:	f000 f908 	bl	8001c7c <Error_Handler>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3740      	adds	r7, #64	; 0x40
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001a7a:	4a13      	ldr	r2, [pc, #76]	; (8001ac8 <MX_I2C1_Init+0x54>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001a80:	4a12      	ldr	r2, [pc, #72]	; (8001acc <MX_I2C1_Init+0x58>)
 8001a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001ab2:	f001 f871 	bl	8002b98 <HAL_I2C_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001abc:	f000 f8de 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200000b8 	.word	0x200000b8
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	000186a0 	.word	0x000186a0

08001ad0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001aee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001af6:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001afa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001b04:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001b08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001b18:	f002 fc26 	bl	8004368 <HAL_TIM_Base_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b22:	f000 f8ab 	bl	8001c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4619      	mov	r1, r3
 8001b32:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001b34:	f002 fdc2 	bl	80046bc <HAL_TIM_ConfigClockSource>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b3e:	f000 f89d 	bl	8001c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <MX_TIM2_Init+0x98>)
 8001b50:	f002 ff9e 	bl	8004a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b5a:	f000 f88f 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000010c 	.word	0x2000010c

08001b6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_USART2_UART_Init+0x50>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	f002 ffe4 	bl	8004b70 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bae:	f000 f865 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000154 	.word	0x20000154
 8001bbc:	40004400 	.word	0x40004400

08001bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <MX_GPIO_Init+0xb4>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <MX_GPIO_Init+0xb4>)
 8001bda:	f043 0310 	orr.w	r3, r3, #16
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <MX_GPIO_Init+0xb4>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <MX_GPIO_Init+0xb4>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a20      	ldr	r2, [pc, #128]	; (8001c74 <MX_GPIO_Init+0xb4>)
 8001bf2:	f043 0320 	orr.w	r3, r3, #32
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <MX_GPIO_Init+0xb4>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <MX_GPIO_Init+0xb4>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a1a      	ldr	r2, [pc, #104]	; (8001c74 <MX_GPIO_Init+0xb4>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <MX_GPIO_Init+0xb4>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <MX_GPIO_Init+0xb4>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <MX_GPIO_Init+0xb4>)
 8001c22:	f043 0308 	orr.w	r3, r3, #8
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <MX_GPIO_Init+0xb4>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001c34:	2201      	movs	r2, #1
 8001c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c3a:	480f      	ldr	r0, [pc, #60]	; (8001c78 <MX_GPIO_Init+0xb8>)
 8001c3c:	f000 ff94 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c46:	480c      	ldr	r0, [pc, #48]	; (8001c78 <MX_GPIO_Init+0xb8>)
 8001c48:	f000 ff8e 	bl	8002b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BluetoothReset_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BluetoothReset_Pin;
 8001c4c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	4619      	mov	r1, r3
 8001c64:	4804      	ldr	r0, [pc, #16]	; (8001c78 <MX_GPIO_Init+0xb8>)
 8001c66:	f000 fdfb 	bl	8002860 <HAL_GPIO_Init>

}
 8001c6a:	bf00      	nop
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40011000 	.word	0x40011000

08001c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <reverse>:
char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
	int i = 0, j = len - 1, temp;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	613b      	str	r3, [r7, #16]
	while (i < j)
 8001c9c:	e018      	b.n	8001cd0 <reverse+0x48>
	{
		temp = str[i];
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	60fb      	str	r3, [r7, #12]
		str[i] = str[j];
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	441a      	add	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	440b      	add	r3, r1
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	701a      	strb	r2, [r3, #0]
		str[j] = temp;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
		i++; j--;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	613b      	str	r3, [r7, #16]
	while (i < j)
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbe2      	blt.n	8001c9e <reverse+0x16>
	}
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <intToStr>:

// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
	int i = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
	while (x)
 8001cf4:	e01d      	b.n	8001d32 <intToStr+0x4e>
	{
		str[i++] = (x % 10) + '0';
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <intToStr+0x8c>)
 8001cfa:	fb83 1302 	smull	r1, r3, r3, r2
 8001cfe:	1099      	asrs	r1, r3, #2
 8001d00:	17d3      	asrs	r3, r2, #31
 8001d02:	1ac9      	subs	r1, r1, r3
 8001d04:	460b      	mov	r3, r1
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	1ad1      	subs	r1, r2, r3
 8001d0e:	b2ca      	uxtb	r2, r1
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	1c59      	adds	r1, r3, #1
 8001d14:	6179      	str	r1, [r7, #20]
 8001d16:	4619      	mov	r1, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3230      	adds	r2, #48	; 0x30
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]
		x = x / 10;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <intToStr+0x8c>)
 8001d26:	fb82 1203 	smull	r1, r2, r2, r3
 8001d2a:	1092      	asrs	r2, r2, #2
 8001d2c:	17db      	asrs	r3, r3, #31
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	60fb      	str	r3, [r7, #12]
	while (x)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1de      	bne.n	8001cf6 <intToStr+0x12>
	}

	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 8001d38:	e007      	b.n	8001d4a <intToStr+0x66>
		str[i++] = '0';
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	617a      	str	r2, [r7, #20]
 8001d40:	461a      	mov	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	2230      	movs	r2, #48	; 0x30
 8001d48:	701a      	strb	r2, [r3, #0]
	while (i < d)
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbf3      	blt.n	8001d3a <intToStr+0x56>

	reverse(str, i);
 8001d52:	6979      	ldr	r1, [r7, #20]
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff ff97 	bl	8001c88 <reverse>
	str[i] = '\0';
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	4413      	add	r3, r2
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
	return i;
 8001d64:	697b      	ldr	r3, [r7, #20]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	66666667 	.word	0x66666667

08001d74 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
 8001d74:	b5b0      	push	{r4, r5, r7, lr}
 8001d76:	b090      	sub	sp, #64	; 0x40
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
	unsigned char minus_flag = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (n < 0)
 8001d86:	f04f 0100 	mov.w	r1, #0
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff f978 	bl	8001080 <__aeabi_fcmplt>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <ftoa+0x30>
	{
		minus_flag = 1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		n = -n;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001da2:	60fb      	str	r3, [r7, #12]
	}

	// Extract integer part
	int ipart = (int)n;
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7ff f9a9 	bl	80010fc <__aeabi_f2iz>
 8001daa:	4603      	mov	r3, r0
 8001dac:	63bb      	str	r3, [r7, #56]	; 0x38

	// Extract floating part
	float fpart = n - (float)ipart;
 8001dae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001db0:	f7fe ff74 	bl	8000c9c <__aeabi_i2f>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4619      	mov	r1, r3
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f7fe feb9 	bl	8000b30 <__aeabi_fsub>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34

	// convert integer part to string
	int i = intToStr(ipart, res, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001dc8:	f7ff ff8c 	bl	8001ce4 <intToStr>
 8001dcc:	6338      	str	r0, [r7, #48]	; 0x30

	// check for display option after point
	if (afterpoint != 0)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d02c      	beq.n	8001e2e <ftoa+0xba>
	{
		res[i] = '.';  // add dot
 8001dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	4413      	add	r3, r2
 8001dda:	222e      	movs	r2, #46	; 0x2e
 8001ddc:	701a      	strb	r2, [r3, #0]

					   // Get the value of fraction part upto given no.
					   // of points after dot. The third parameter is needed
					   // to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
 8001dde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001de0:	f7fe fb22 	bl	8000428 <__aeabi_f2d>
 8001de4:	4604      	mov	r4, r0
 8001de6:	460d      	mov	r5, r1
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7fe fb0b 	bl	8000404 <__aeabi_i2d>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	f04f 0000 	mov.w	r0, #0
 8001df6:	493b      	ldr	r1, [pc, #236]	; (8001ee4 <ftoa+0x170>)
 8001df8:	f003 fc6e 	bl	80056d8 <pow>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fb68 	bl	80004d8 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe fe3a 	bl	8000a88 <__aeabi_d2f>
 8001e14:	4603      	mov	r3, r0
 8001e16:	637b      	str	r3, [r7, #52]	; 0x34

		intToStr((int)fpart, res + i + 1, afterpoint);
 8001e18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e1a:	f7ff f96f 	bl	80010fc <__aeabi_f2iz>
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e20:	3301      	adds	r3, #1
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	4413      	add	r3, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7ff ff5b 	bl	8001ce4 <intToStr>
	}

	char string[30];
	if (minus_flag == 1)
 8001e2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d131      	bne.n	8001e9a <ftoa+0x126>
	{
		memset(string, 0, 30);
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	221e      	movs	r2, #30
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fc3a 	bl	80056b8 <memset>
		string[0] = '-';
 8001e44:	232d      	movs	r3, #45	; 0x2d
 8001e46:	743b      	strb	r3, [r7, #16]
		if (n < 1.0f)
 8001e48:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f7ff f917 	bl	8001080 <__aeabi_fcmplt>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d009      	beq.n	8001e6c <ftoa+0xf8>
		{
			string[1] = '0';
 8001e58:	2330      	movs	r3, #48	; 0x30
 8001e5a:	747b      	strb	r3, [r7, #17]
			strcpy(&string[2], res);
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	3302      	adds	r3, #2
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 fc2f 	bl	80056c8 <strcpy>
 8001e6a:	e006      	b.n	8001e7a <ftoa+0x106>
		}
		else
			strcpy(&string[1], res);
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	3301      	adds	r3, #1
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 fc27 	bl	80056c8 <strcpy>

		memset(res, 0, strlen(res));
 8001e7a:	68b8      	ldr	r0, [r7, #8]
 8001e7c:	f7fe f968 	bl	8000150 <strlen>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	2100      	movs	r1, #0
 8001e86:	68b8      	ldr	r0, [r7, #8]
 8001e88:	f003 fc16 	bl	80056b8 <memset>
		strcpy(res, string);
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	4619      	mov	r1, r3
 8001e92:	68b8      	ldr	r0, [r7, #8]
 8001e94:	f003 fc18 	bl	80056c8 <strcpy>
			strcpy(&string[1], res);
			memset(res, 0, strlen(res));
			strcpy(res, string);
		}

}
 8001e98:	e020      	b.n	8001edc <ftoa+0x168>
		if (n < 1.0f)
 8001e9a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff f8ee 	bl	8001080 <__aeabi_fcmplt>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d100      	bne.n	8001eac <ftoa+0x138>
}
 8001eaa:	e017      	b.n	8001edc <ftoa+0x168>
			string[0] = '0';
 8001eac:	2330      	movs	r3, #48	; 0x30
 8001eae:	743b      	strb	r3, [r7, #16]
			strcpy(&string[1], res);
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 fc05 	bl	80056c8 <strcpy>
			memset(res, 0, strlen(res));
 8001ebe:	68b8      	ldr	r0, [r7, #8]
 8001ec0:	f7fe f946 	bl	8000150 <strlen>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2100      	movs	r1, #0
 8001eca:	68b8      	ldr	r0, [r7, #8]
 8001ecc:	f003 fbf4 	bl	80056b8 <memset>
			strcpy(res, string);
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	68b8      	ldr	r0, [r7, #8]
 8001ed8:	f003 fbf6 	bl	80056c8 <strcpy>
}
 8001edc:	bf00      	nop
 8001ede:	3740      	adds	r7, #64	; 0x40
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee4:	40240000 	.word	0x40240000

08001ee8 <string_compare>:

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	75bb      	strb	r3, [r7, #22]
 8001efe:	e012      	b.n	8001f26 <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8001f00:	7dbb      	ldrb	r3, [r7, #22]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	7dbb      	ldrb	r3, [r7, #22]
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	440b      	add	r3, r1
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d103      	bne.n	8001f1c <string_compare+0x34>
	   	  		  comVAR++;
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
 8001f16:	3301      	adds	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
 8001f1a:	e001      	b.n	8001f20 <string_compare+0x38>
	   	  	  else comVAR=0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8001f20:	7dbb      	ldrb	r3, [r7, #22]
 8001f22:	3301      	adds	r3, #1
 8001f24:	75bb      	strb	r3, [r7, #22]
 8001f26:	7dbb      	ldrb	r3, [r7, #22]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	88fa      	ldrh	r2, [r7, #6]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d8e7      	bhi.n	8001f00 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d101      	bne.n	8001f3e <string_compare+0x56>
		 	return 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <string_compare+0x58>
	 else 	return 0;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
	...

08001f4c <Message_handler>:

void Message_handler()
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b08f      	sub	sp, #60	; 0x3c
 8001f50:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "get", strlen("get")))
 8001f52:	2203      	movs	r2, #3
 8001f54:	493f      	ldr	r1, [pc, #252]	; (8002054 <Message_handler+0x108>)
 8001f56:	4840      	ldr	r0, [pc, #256]	; (8002058 <Message_handler+0x10c>)
 8001f58:	f7ff ffc6 	bl	8001ee8 <string_compare>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d069      	beq.n	8002036 <Message_handler+0xea>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f68:	483c      	ldr	r0, [pc, #240]	; (800205c <Message_handler+0x110>)
 8001f6a:	f000 fdfd 	bl	8002b68 <HAL_GPIO_WritePin>
		BMP280_calc_values();
 8001f6e:	f7ff fa07 	bl	8001380 <BMP280_calc_values>
		char string[50];
		memset(string, 0, sizeof(string));
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2232      	movs	r2, #50	; 0x32
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 fb9d 	bl	80056b8 <memset>
		ftoa(temperature, &string[0], 3);
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <Message_handler+0x114>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	1d39      	adds	r1, r7, #4
 8001f84:	2203      	movs	r2, #3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fef4 	bl	8001d74 <ftoa>
		strcat(string, ",");
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe f8de 	bl	8000150 <strlen>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4931      	ldr	r1, [pc, #196]	; (8002064 <Message_handler+0x118>)
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	8013      	strh	r3, [r2, #0]
		ftoa(pressure, &string[strlen(string)], 3);
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <Message_handler+0x11c>)
 8001fa8:	681c      	ldr	r4, [r3, #0]
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe f8cf 	bl	8000150 <strlen>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	4413      	add	r3, r2
 8001fb8:	2203      	movs	r2, #3
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff fed9 	bl	8001d74 <ftoa>
		strcat(string, ",");
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe f8c3 	bl	8000150 <strlen>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4924      	ldr	r1, [pc, #144]	; (8002064 <Message_handler+0x118>)
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	8013      	strh	r3, [r2, #0]
		ftoa(altitude, &string[strlen(string)], 3);
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <Message_handler+0x120>)
 8001fde:	681c      	ldr	r4, [r3, #0]
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe f8b4 	bl	8000150 <strlen>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	4413      	add	r3, r2
 8001fee:	2203      	movs	r2, #3
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f7ff febe 	bl	8001d74 <ftoa>
		strcat(string, "\n");
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe f8a8 	bl	8000150 <strlen>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	4413      	add	r3, r2
 8002008:	4919      	ldr	r1, [pc, #100]	; (8002070 <Message_handler+0x124>)
 800200a:	461a      	mov	r2, r3
 800200c:	460b      	mov	r3, r1
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 500);
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe f89b 	bl	8000150 <strlen>
 800201a:	4603      	mov	r3, r0
 800201c:	b29a      	uxth	r2, r3
 800201e:	1d39      	adds	r1, r7, #4
 8002020:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002024:	4813      	ldr	r0, [pc, #76]	; (8002074 <Message_handler+0x128>)
 8002026:	f002 fdf0 	bl	8004c0a <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 800202a:	2201      	movs	r2, #1
 800202c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002030:	480a      	ldr	r0, [pc, #40]	; (800205c <Message_handler+0x110>)
 8002032:	f000 fd99 	bl	8002b68 <HAL_GPIO_WritePin>
	}

	memset(buffer, 0, sizeof(buffer));
 8002036:	2232      	movs	r2, #50	; 0x32
 8002038:	2100      	movs	r1, #0
 800203a:	4807      	ldr	r0, [pc, #28]	; (8002058 <Message_handler+0x10c>)
 800203c:	f003 fb3c 	bl	80056b8 <memset>
	buffer_index = 0;
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <Message_handler+0x12c>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <Message_handler+0x130>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
}
 800204c:	bf00      	nop
 800204e:	373c      	adds	r7, #60	; 0x3c
 8002050:	46bd      	mov	sp, r7
 8002052:	bd90      	pop	{r4, r7, pc}
 8002054:	08006dc8 	.word	0x08006dc8
 8002058:	20000198 	.word	0x20000198
 800205c:	40011000 	.word	0x40011000
 8002060:	200000ac 	.word	0x200000ac
 8002064:	08006dcc 	.word	0x08006dcc
 8002068:	200000b0 	.word	0x200000b0
 800206c:	200000b4 	.word	0x200000b4
 8002070:	08006dd0 	.word	0x08006dd0
 8002074:	20000154 	.word	0x20000154
 8002078:	200001cb 	.word	0x200001cb
 800207c:	200001ca 	.word	0x200001ca

08002080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_MspInit+0x5c>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_MspInit+0x5c>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6193      	str	r3, [r2, #24]
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_MspInit+0x5c>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_MspInit+0x5c>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <HAL_MspInit+0x5c>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	61d3      	str	r3, [r2, #28]
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_MspInit+0x5c>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_MspInit+0x60>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_MspInit+0x60>)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010000 	.word	0x40010000

080020e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <HAL_I2C_MspInit+0x70>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d123      	bne.n	800214c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_I2C_MspInit+0x74>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a13      	ldr	r2, [pc, #76]	; (8002158 <HAL_I2C_MspInit+0x74>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_I2C_MspInit+0x74>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800211c:	23c0      	movs	r3, #192	; 0xc0
 800211e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002120:	2312      	movs	r3, #18
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4619      	mov	r1, r3
 800212e:	480b      	ldr	r0, [pc, #44]	; (800215c <HAL_I2C_MspInit+0x78>)
 8002130:	f000 fb96 	bl	8002860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_I2C_MspInit+0x74>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <HAL_I2C_MspInit+0x74>)
 800213a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800213e:	61d3      	str	r3, [r2, #28]
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_I2C_MspInit+0x74>)
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800214c:	bf00      	nop
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40005400 	.word	0x40005400
 8002158:	40021000 	.word	0x40021000
 800215c:	40010c00 	.word	0x40010c00

08002160 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002170:	d113      	bne.n	800219a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_TIM_Base_MspInit+0x44>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <HAL_TIM_Base_MspInit+0x44>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	61d3      	str	r3, [r2, #28]
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_TIM_Base_MspInit+0x44>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	201c      	movs	r0, #28
 8002190:	f000 fa7f 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002194:	201c      	movs	r0, #28
 8002196:	f000 fa98 	bl	80026ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000

080021a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1f      	ldr	r2, [pc, #124]	; (8002240 <HAL_UART_MspInit+0x98>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d137      	bne.n	8002238 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021c8:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_UART_MspInit+0x9c>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <HAL_UART_MspInit+0x9c>)
 80021ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d2:	61d3      	str	r3, [r2, #28]
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_UART_MspInit+0x9c>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <HAL_UART_MspInit+0x9c>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_UART_MspInit+0x9c>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6193      	str	r3, [r2, #24]
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_UART_MspInit+0x9c>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021f8:	2304      	movs	r3, #4
 80021fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	4619      	mov	r1, r3
 800220a:	480f      	ldr	r0, [pc, #60]	; (8002248 <HAL_UART_MspInit+0xa0>)
 800220c:	f000 fb28 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002210:	2308      	movs	r3, #8
 8002212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	4619      	mov	r1, r3
 8002222:	4809      	ldr	r0, [pc, #36]	; (8002248 <HAL_UART_MspInit+0xa0>)
 8002224:	f000 fb1c 	bl	8002860 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	2026      	movs	r0, #38	; 0x26
 800222e:	f000 fa30 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002232:	2026      	movs	r0, #38	; 0x26
 8002234:	f000 fa49 	bl	80026ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002238:	bf00      	nop
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40004400 	.word	0x40004400
 8002244:	40021000 	.word	0x40021000
 8002248:	40010800 	.word	0x40010800

0800224c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <HardFault_Handler+0x4>

0800225e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002262:	e7fe      	b.n	8002262 <MemManage_Handler+0x4>

08002264 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <BusFault_Handler+0x4>

0800226a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800226e:	e7fe      	b.n	800226e <UsageFault_Handler+0x4>

08002270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002298:	f000 f8e4 	bl	8002464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}

080022a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer)>0)
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <TIM2_IRQHandler+0x30>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <TIM2_IRQHandler+0x18>
		timer_count++;
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <TIM2_IRQHandler+0x34>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b07      	ldr	r3, [pc, #28]	; (80022d4 <TIM2_IRQHandler+0x34>)
 80022b6:	701a      	strb	r2, [r3, #0]

	if(timer_count>5)
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <TIM2_IRQHandler+0x34>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d901      	bls.n	80022c4 <TIM2_IRQHandler+0x24>
		Message_handler();
 80022c0:	f7ff fe44 	bl	8001f4c <Message_handler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022c4:	4804      	ldr	r0, [pc, #16]	; (80022d8 <TIM2_IRQHandler+0x38>)
 80022c6:	f002 f8f1 	bl	80044ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000198 	.word	0x20000198
 80022d4:	200001ca 	.word	0x200001ca
 80022d8:	2000010c 	.word	0x2000010c

080022dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)&buffer[buffer_index++], 1, 10);
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <USART2_IRQHandler+0x3c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	b2d1      	uxtb	r1, r2
 80022e8:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <USART2_IRQHandler+0x3c>)
 80022ea:	7011      	strb	r1, [r2, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <USART2_IRQHandler+0x40>)
 80022f0:	18d1      	adds	r1, r2, r3
 80022f2:	230a      	movs	r3, #10
 80022f4:	2201      	movs	r2, #1
 80022f6:	480a      	ldr	r0, [pc, #40]	; (8002320 <USART2_IRQHandler+0x44>)
 80022f8:	f002 fd19 	bl	8004d2e <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <USART2_IRQHandler+0x3c>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	3b01      	subs	r3, #1
 8002302:	4a06      	ldr	r2, [pc, #24]	; (800231c <USART2_IRQHandler+0x40>)
 8002304:	5cd3      	ldrb	r3, [r2, r3]
 8002306:	2b0a      	cmp	r3, #10
 8002308:	d101      	bne.n	800230e <USART2_IRQHandler+0x32>
		Message_handler();
 800230a:	f7ff fe1f 	bl	8001f4c <Message_handler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800230e:	4804      	ldr	r0, [pc, #16]	; (8002320 <USART2_IRQHandler+0x44>)
 8002310:	f002 fdb0 	bl	8004e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200001cb 	.word	0x200001cb
 800231c:	20000198 	.word	0x20000198
 8002320:	20000154 	.word	0x20000154

08002324 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <SystemInit+0x5c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <SystemInit+0x5c>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <SystemInit+0x5c>)
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4911      	ldr	r1, [pc, #68]	; (8002380 <SystemInit+0x5c>)
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <SystemInit+0x60>)
 800233c:	4013      	ands	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <SystemInit+0x5c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <SystemInit+0x5c>)
 8002346:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800234a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <SystemInit+0x5c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <SystemInit+0x5c>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <SystemInit+0x5c>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a07      	ldr	r2, [pc, #28]	; (8002380 <SystemInit+0x5c>)
 8002362:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002366:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <SystemInit+0x5c>)
 800236a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800236e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <SystemInit+0x64>)
 8002372:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002376:	609a      	str	r2, [r3, #8]
#endif 
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	40021000 	.word	0x40021000
 8002384:	f8ff0000 	.word	0xf8ff0000
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800238c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800238e:	e003      	b.n	8002398 <LoopCopyDataInit>

08002390 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002392:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002394:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002396:	3104      	adds	r1, #4

08002398 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002398:	480a      	ldr	r0, [pc, #40]	; (80023c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800239c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800239e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023a0:	d3f6      	bcc.n	8002390 <CopyDataInit>
  ldr r2, =_sbss
 80023a2:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023a4:	e002      	b.n	80023ac <LoopFillZerobss>

080023a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023a8:	f842 3b04 	str.w	r3, [r2], #4

080023ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80023ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023b0:	d3f9      	bcc.n	80023a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023b2:	f7ff ffb7 	bl	8002324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023b6:	f003 f95b 	bl	8005670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ba:	f7ff fad3 	bl	8001964 <main>
  bx lr
 80023be:	4770      	bx	lr
  ldr r3, =_sidata
 80023c0:	08006e50 	.word	0x08006e50
  ldr r0, =_sdata
 80023c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80023c8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80023cc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80023d0:	200001d0 	.word	0x200001d0

080023d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023d4:	e7fe      	b.n	80023d4 <ADC1_2_IRQHandler>
	...

080023d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_Init+0x28>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_Init+0x28>)
 80023e2:	f043 0310 	orr.w	r3, r3, #16
 80023e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e8:	2003      	movs	r0, #3
 80023ea:	f000 f947 	bl	800267c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f000 f808 	bl	8002404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f4:	f7ff fe44 	bl	8002080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40022000 	.word	0x40022000

08002404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_InitTick+0x54>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_InitTick+0x58>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241a:	fbb3 f3f1 	udiv	r3, r3, r1
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f95f 	bl	80026e6 <HAL_SYSTICK_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00e      	b.n	8002450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b0f      	cmp	r3, #15
 8002436:	d80a      	bhi.n	800244e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002438:	2200      	movs	r2, #0
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f000 f927 	bl	8002692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002444:	4a06      	ldr	r2, [pc, #24]	; (8002460 <HAL_InitTick+0x5c>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000000 	.word	0x20000000
 800245c:	20000008 	.word	0x20000008
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_IncTick+0x1c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_IncTick+0x20>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	4a03      	ldr	r2, [pc, #12]	; (8002484 <HAL_IncTick+0x20>)
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	20000008 	.word	0x20000008
 8002484:	200001cc 	.word	0x200001cc

08002488 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return uwTick;
 800248c:	4b02      	ldr	r3, [pc, #8]	; (8002498 <HAL_GetTick+0x10>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	200001cc 	.word	0x200001cc

0800249c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff fff0 	bl	8002488 <HAL_GetTick>
 80024a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d005      	beq.n	80024c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_Delay+0x44>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024c2:	bf00      	nop
 80024c4:	f7ff ffe0 	bl	8002488 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d8f7      	bhi.n	80024c4 <HAL_Delay+0x28>
  {
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000008 	.word	0x20000008

080024e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002500:	4013      	ands	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800250c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	60d3      	str	r3, [r2, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <__NVIC_GetPriorityGrouping+0x18>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0307 	and.w	r3, r3, #7
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	db0b      	blt.n	8002572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	4906      	ldr	r1, [pc, #24]	; (800257c <__NVIC_EnableIRQ+0x34>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2001      	movs	r0, #1
 800256a:	fa00 f202 	lsl.w	r2, r0, r2
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100

08002580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db0a      	blt.n	80025aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	490c      	ldr	r1, [pc, #48]	; (80025cc <__NVIC_SetPriority+0x4c>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	440b      	add	r3, r1
 80025a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a8:	e00a      	b.n	80025c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4908      	ldr	r1, [pc, #32]	; (80025d0 <__NVIC_SetPriority+0x50>)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3b04      	subs	r3, #4
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	440b      	add	r3, r1
 80025be:	761a      	strb	r2, [r3, #24]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f1c3 0307 	rsb	r3, r3, #7
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	bf28      	it	cs
 80025f2:	2304      	movcs	r3, #4
 80025f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d902      	bls.n	8002604 <NVIC_EncodePriority+0x30>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3b03      	subs	r3, #3
 8002602:	e000      	b.n	8002606 <NVIC_EncodePriority+0x32>
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	f04f 32ff 	mov.w	r2, #4294967295
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	401a      	ands	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800261c:	f04f 31ff 	mov.w	r1, #4294967295
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43d9      	mvns	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	4313      	orrs	r3, r2
         );
}
 800262e:	4618      	mov	r0, r3
 8002630:	3724      	adds	r7, #36	; 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002648:	d301      	bcc.n	800264e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <SysTick_Config+0x40>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002656:	210f      	movs	r1, #15
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	f7ff ff90 	bl	8002580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <SysTick_Config+0x40>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <SysTick_Config+0x40>)
 8002668:	2207      	movs	r2, #7
 800266a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	e000e010 	.word	0xe000e010

0800267c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff2d 	bl	80024e4 <__NVIC_SetPriorityGrouping>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a4:	f7ff ff42 	bl	800252c <__NVIC_GetPriorityGrouping>
 80026a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	f7ff ff90 	bl	80025d4 <NVIC_EncodePriority>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff5f 	bl	8002580 <__NVIC_SetPriority>
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff35 	bl	8002548 <__NVIC_EnableIRQ>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ffa2 	bl	8002638 <SysTick_Config>
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026fe:	b480      	push	{r7}
 8002700:	b085      	sub	sp, #20
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002710:	2b02      	cmp	r3, #2
 8002712:	d008      	beq.n	8002726 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2204      	movs	r2, #4
 8002718:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e020      	b.n	8002768 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 020e 	bic.w	r2, r2, #14
 8002734:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f202 	lsl.w	r2, r1, r2
 8002754:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002766:	7bfb      	ldrb	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
	...

08002774 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002786:	2b02      	cmp	r3, #2
 8002788:	d005      	beq.n	8002796 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2204      	movs	r2, #4
 800278e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	e051      	b.n	800283a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 020e 	bic.w	r2, r2, #14
 80027a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0201 	bic.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a22      	ldr	r2, [pc, #136]	; (8002844 <HAL_DMA_Abort_IT+0xd0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d029      	beq.n	8002814 <HAL_DMA_Abort_IT+0xa0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_DMA_Abort_IT+0xd4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d022      	beq.n	8002810 <HAL_DMA_Abort_IT+0x9c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1f      	ldr	r2, [pc, #124]	; (800284c <HAL_DMA_Abort_IT+0xd8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d01a      	beq.n	800280a <HAL_DMA_Abort_IT+0x96>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <HAL_DMA_Abort_IT+0xdc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d012      	beq.n	8002804 <HAL_DMA_Abort_IT+0x90>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <HAL_DMA_Abort_IT+0xe0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00a      	beq.n	80027fe <HAL_DMA_Abort_IT+0x8a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <HAL_DMA_Abort_IT+0xe4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d102      	bne.n	80027f8 <HAL_DMA_Abort_IT+0x84>
 80027f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027f6:	e00e      	b.n	8002816 <HAL_DMA_Abort_IT+0xa2>
 80027f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027fc:	e00b      	b.n	8002816 <HAL_DMA_Abort_IT+0xa2>
 80027fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002802:	e008      	b.n	8002816 <HAL_DMA_Abort_IT+0xa2>
 8002804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002808:	e005      	b.n	8002816 <HAL_DMA_Abort_IT+0xa2>
 800280a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800280e:	e002      	b.n	8002816 <HAL_DMA_Abort_IT+0xa2>
 8002810:	2310      	movs	r3, #16
 8002812:	e000      	b.n	8002816 <HAL_DMA_Abort_IT+0xa2>
 8002814:	2301      	movs	r3, #1
 8002816:	4a11      	ldr	r2, [pc, #68]	; (800285c <HAL_DMA_Abort_IT+0xe8>)
 8002818:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
    } 
  }
  return status;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40020008 	.word	0x40020008
 8002848:	4002001c 	.word	0x4002001c
 800284c:	40020030 	.word	0x40020030
 8002850:	40020044 	.word	0x40020044
 8002854:	40020058 	.word	0x40020058
 8002858:	4002006c 	.word	0x4002006c
 800285c:	40020000 	.word	0x40020000

08002860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b08b      	sub	sp, #44	; 0x2c
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800286e:	2300      	movs	r3, #0
 8002870:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002872:	e169      	b.n	8002b48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002874:	2201      	movs	r2, #1
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	429a      	cmp	r2, r3
 800288e:	f040 8158 	bne.w	8002b42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a9a      	ldr	r2, [pc, #616]	; (8002b00 <HAL_GPIO_Init+0x2a0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d05e      	beq.n	800295a <HAL_GPIO_Init+0xfa>
 800289c:	4a98      	ldr	r2, [pc, #608]	; (8002b00 <HAL_GPIO_Init+0x2a0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d875      	bhi.n	800298e <HAL_GPIO_Init+0x12e>
 80028a2:	4a98      	ldr	r2, [pc, #608]	; (8002b04 <HAL_GPIO_Init+0x2a4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d058      	beq.n	800295a <HAL_GPIO_Init+0xfa>
 80028a8:	4a96      	ldr	r2, [pc, #600]	; (8002b04 <HAL_GPIO_Init+0x2a4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d86f      	bhi.n	800298e <HAL_GPIO_Init+0x12e>
 80028ae:	4a96      	ldr	r2, [pc, #600]	; (8002b08 <HAL_GPIO_Init+0x2a8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d052      	beq.n	800295a <HAL_GPIO_Init+0xfa>
 80028b4:	4a94      	ldr	r2, [pc, #592]	; (8002b08 <HAL_GPIO_Init+0x2a8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d869      	bhi.n	800298e <HAL_GPIO_Init+0x12e>
 80028ba:	4a94      	ldr	r2, [pc, #592]	; (8002b0c <HAL_GPIO_Init+0x2ac>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d04c      	beq.n	800295a <HAL_GPIO_Init+0xfa>
 80028c0:	4a92      	ldr	r2, [pc, #584]	; (8002b0c <HAL_GPIO_Init+0x2ac>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d863      	bhi.n	800298e <HAL_GPIO_Init+0x12e>
 80028c6:	4a92      	ldr	r2, [pc, #584]	; (8002b10 <HAL_GPIO_Init+0x2b0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d046      	beq.n	800295a <HAL_GPIO_Init+0xfa>
 80028cc:	4a90      	ldr	r2, [pc, #576]	; (8002b10 <HAL_GPIO_Init+0x2b0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d85d      	bhi.n	800298e <HAL_GPIO_Init+0x12e>
 80028d2:	2b12      	cmp	r3, #18
 80028d4:	d82a      	bhi.n	800292c <HAL_GPIO_Init+0xcc>
 80028d6:	2b12      	cmp	r3, #18
 80028d8:	d859      	bhi.n	800298e <HAL_GPIO_Init+0x12e>
 80028da:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <HAL_GPIO_Init+0x80>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	0800295b 	.word	0x0800295b
 80028e4:	08002935 	.word	0x08002935
 80028e8:	08002947 	.word	0x08002947
 80028ec:	08002989 	.word	0x08002989
 80028f0:	0800298f 	.word	0x0800298f
 80028f4:	0800298f 	.word	0x0800298f
 80028f8:	0800298f 	.word	0x0800298f
 80028fc:	0800298f 	.word	0x0800298f
 8002900:	0800298f 	.word	0x0800298f
 8002904:	0800298f 	.word	0x0800298f
 8002908:	0800298f 	.word	0x0800298f
 800290c:	0800298f 	.word	0x0800298f
 8002910:	0800298f 	.word	0x0800298f
 8002914:	0800298f 	.word	0x0800298f
 8002918:	0800298f 	.word	0x0800298f
 800291c:	0800298f 	.word	0x0800298f
 8002920:	0800298f 	.word	0x0800298f
 8002924:	0800293d 	.word	0x0800293d
 8002928:	08002951 	.word	0x08002951
 800292c:	4a79      	ldr	r2, [pc, #484]	; (8002b14 <HAL_GPIO_Init+0x2b4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002932:	e02c      	b.n	800298e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	623b      	str	r3, [r7, #32]
          break;
 800293a:	e029      	b.n	8002990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	3304      	adds	r3, #4
 8002942:	623b      	str	r3, [r7, #32]
          break;
 8002944:	e024      	b.n	8002990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	3308      	adds	r3, #8
 800294c:	623b      	str	r3, [r7, #32]
          break;
 800294e:	e01f      	b.n	8002990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	330c      	adds	r3, #12
 8002956:	623b      	str	r3, [r7, #32]
          break;
 8002958:	e01a      	b.n	8002990 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002962:	2304      	movs	r3, #4
 8002964:	623b      	str	r3, [r7, #32]
          break;
 8002966:	e013      	b.n	8002990 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d105      	bne.n	800297c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002970:	2308      	movs	r3, #8
 8002972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	611a      	str	r2, [r3, #16]
          break;
 800297a:	e009      	b.n	8002990 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800297c:	2308      	movs	r3, #8
 800297e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	615a      	str	r2, [r3, #20]
          break;
 8002986:	e003      	b.n	8002990 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002988:	2300      	movs	r3, #0
 800298a:	623b      	str	r3, [r7, #32]
          break;
 800298c:	e000      	b.n	8002990 <HAL_GPIO_Init+0x130>
          break;
 800298e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2bff      	cmp	r3, #255	; 0xff
 8002994:	d801      	bhi.n	800299a <HAL_GPIO_Init+0x13a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	e001      	b.n	800299e <HAL_GPIO_Init+0x13e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3304      	adds	r3, #4
 800299e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2bff      	cmp	r3, #255	; 0xff
 80029a4:	d802      	bhi.n	80029ac <HAL_GPIO_Init+0x14c>
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	e002      	b.n	80029b2 <HAL_GPIO_Init+0x152>
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	3b08      	subs	r3, #8
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	210f      	movs	r1, #15
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	401a      	ands	r2, r3
 80029c4:	6a39      	ldr	r1, [r7, #32]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	431a      	orrs	r2, r3
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80b1 	beq.w	8002b42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029e0:	4b4d      	ldr	r3, [pc, #308]	; (8002b18 <HAL_GPIO_Init+0x2b8>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	4a4c      	ldr	r2, [pc, #304]	; (8002b18 <HAL_GPIO_Init+0x2b8>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6193      	str	r3, [r2, #24]
 80029ec:	4b4a      	ldr	r3, [pc, #296]	; (8002b18 <HAL_GPIO_Init+0x2b8>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029f8:	4a48      	ldr	r2, [pc, #288]	; (8002b1c <HAL_GPIO_Init+0x2bc>)
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	3302      	adds	r3, #2
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a40      	ldr	r2, [pc, #256]	; (8002b20 <HAL_GPIO_Init+0x2c0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d013      	beq.n	8002a4c <HAL_GPIO_Init+0x1ec>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a3f      	ldr	r2, [pc, #252]	; (8002b24 <HAL_GPIO_Init+0x2c4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00d      	beq.n	8002a48 <HAL_GPIO_Init+0x1e8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a3e      	ldr	r2, [pc, #248]	; (8002b28 <HAL_GPIO_Init+0x2c8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d007      	beq.n	8002a44 <HAL_GPIO_Init+0x1e4>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a3d      	ldr	r2, [pc, #244]	; (8002b2c <HAL_GPIO_Init+0x2cc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d101      	bne.n	8002a40 <HAL_GPIO_Init+0x1e0>
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e006      	b.n	8002a4e <HAL_GPIO_Init+0x1ee>
 8002a40:	2304      	movs	r3, #4
 8002a42:	e004      	b.n	8002a4e <HAL_GPIO_Init+0x1ee>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e002      	b.n	8002a4e <HAL_GPIO_Init+0x1ee>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_GPIO_Init+0x1ee>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a50:	f002 0203 	and.w	r2, r2, #3
 8002a54:	0092      	lsls	r2, r2, #2
 8002a56:	4093      	lsls	r3, r2
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a5e:	492f      	ldr	r1, [pc, #188]	; (8002b1c <HAL_GPIO_Init+0x2bc>)
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	089b      	lsrs	r3, r3, #2
 8002a64:	3302      	adds	r3, #2
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d006      	beq.n	8002a86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a78:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	492c      	ldr	r1, [pc, #176]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	e006      	b.n	8002a94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a86:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	4928      	ldr	r1, [pc, #160]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d006      	beq.n	8002aae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002aa0:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	4922      	ldr	r1, [pc, #136]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
 8002aac:	e006      	b.n	8002abc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	491e      	ldr	r1, [pc, #120]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	4918      	ldr	r1, [pc, #96]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]
 8002ad4:	e006      	b.n	8002ae4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	4914      	ldr	r1, [pc, #80]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d021      	beq.n	8002b34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	490e      	ldr	r1, [pc, #56]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60cb      	str	r3, [r1, #12]
 8002afc:	e021      	b.n	8002b42 <HAL_GPIO_Init+0x2e2>
 8002afe:	bf00      	nop
 8002b00:	10320000 	.word	0x10320000
 8002b04:	10310000 	.word	0x10310000
 8002b08:	10220000 	.word	0x10220000
 8002b0c:	10210000 	.word	0x10210000
 8002b10:	10120000 	.word	0x10120000
 8002b14:	10110000 	.word	0x10110000
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	40010800 	.word	0x40010800
 8002b24:	40010c00 	.word	0x40010c00
 8002b28:	40011000 	.word	0x40011000
 8002b2c:	40011400 	.word	0x40011400
 8002b30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	4909      	ldr	r1, [pc, #36]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	3301      	adds	r3, #1
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f47f ae8e 	bne.w	8002874 <HAL_GPIO_Init+0x14>
  }
}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	372c      	adds	r7, #44	; 0x2c
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	40010400 	.word	0x40010400

08002b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
 8002b74:	4613      	mov	r3, r2
 8002b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b78:	787b      	ldrb	r3, [r7, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b84:	e003      	b.n	8002b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	041a      	lsls	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e12b      	b.n	8002e02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff fa90 	bl	80020e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bfc:	f001 fb6e 	bl	80042dc <HAL_RCC_GetPCLK1Freq>
 8002c00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4a81      	ldr	r2, [pc, #516]	; (8002e0c <HAL_I2C_Init+0x274>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d807      	bhi.n	8002c1c <HAL_I2C_Init+0x84>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a80      	ldr	r2, [pc, #512]	; (8002e10 <HAL_I2C_Init+0x278>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	bf94      	ite	ls
 8002c14:	2301      	movls	r3, #1
 8002c16:	2300      	movhi	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e006      	b.n	8002c2a <HAL_I2C_Init+0x92>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a7d      	ldr	r2, [pc, #500]	; (8002e14 <HAL_I2C_Init+0x27c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	bf94      	ite	ls
 8002c24:	2301      	movls	r3, #1
 8002c26:	2300      	movhi	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0e7      	b.n	8002e02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4a78      	ldr	r2, [pc, #480]	; (8002e18 <HAL_I2C_Init+0x280>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0c9b      	lsrs	r3, r3, #18
 8002c3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a6a      	ldr	r2, [pc, #424]	; (8002e0c <HAL_I2C_Init+0x274>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d802      	bhi.n	8002c6c <HAL_I2C_Init+0xd4>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	e009      	b.n	8002c80 <HAL_I2C_Init+0xe8>
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	4a69      	ldr	r2, [pc, #420]	; (8002e1c <HAL_I2C_Init+0x284>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	099b      	lsrs	r3, r3, #6
 8002c7e:	3301      	adds	r3, #1
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	495c      	ldr	r1, [pc, #368]	; (8002e0c <HAL_I2C_Init+0x274>)
 8002c9c:	428b      	cmp	r3, r1
 8002c9e:	d819      	bhi.n	8002cd4 <HAL_I2C_Init+0x13c>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e59      	subs	r1, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cae:	1c59      	adds	r1, r3, #1
 8002cb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cb4:	400b      	ands	r3, r1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_I2C_Init+0x138>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1e59      	subs	r1, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cce:	e051      	b.n	8002d74 <HAL_I2C_Init+0x1dc>
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	e04f      	b.n	8002d74 <HAL_I2C_Init+0x1dc>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d111      	bne.n	8002d00 <HAL_I2C_Init+0x168>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e58      	subs	r0, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	440b      	add	r3, r1
 8002cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e012      	b.n	8002d26 <HAL_I2C_Init+0x18e>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e58      	subs	r0, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	0099      	lsls	r1, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Init+0x196>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e022      	b.n	8002d74 <HAL_I2C_Init+0x1dc>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10e      	bne.n	8002d54 <HAL_I2C_Init+0x1bc>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1e58      	subs	r0, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	440b      	add	r3, r1
 8002d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d52:	e00f      	b.n	8002d74 <HAL_I2C_Init+0x1dc>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1e58      	subs	r0, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	0099      	lsls	r1, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	6809      	ldr	r1, [r1, #0]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002da2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6911      	ldr	r1, [r2, #16]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68d2      	ldr	r2, [r2, #12]
 8002dae:	4311      	orrs	r1, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	000186a0 	.word	0x000186a0
 8002e10:	001e847f 	.word	0x001e847f
 8002e14:	003d08ff 	.word	0x003d08ff
 8002e18:	431bde83 	.word	0x431bde83
 8002e1c:	10624dd3 	.word	0x10624dd3

08002e20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	817b      	strh	r3, [r7, #10]
 8002e30:	4613      	mov	r3, r2
 8002e32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e34:	f7ff fb28 	bl	8002488 <HAL_GetTick>
 8002e38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	f040 80e0 	bne.w	8003008 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	2319      	movs	r3, #25
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4970      	ldr	r1, [pc, #448]	; (8003014 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 fc92 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e0d3      	b.n	800300a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_I2C_Master_Transmit+0x50>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e0cc      	b.n	800300a <HAL_I2C_Master_Transmit+0x1ea>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d007      	beq.n	8002e96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2221      	movs	r2, #33	; 0x21
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	893a      	ldrh	r2, [r7, #8]
 8002ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4a50      	ldr	r2, [pc, #320]	; (8003018 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ed8:	8979      	ldrh	r1, [r7, #10]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	6a3a      	ldr	r2, [r7, #32]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fafc 	bl	80034dc <I2C_MasterRequestWrite>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e08d      	b.n	800300a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f04:	e066      	b.n	8002fd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	6a39      	ldr	r1, [r7, #32]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fd0c 	bl	8003928 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d107      	bne.n	8002f2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e06b      	b.n	800300a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_I2C_Master_Transmit+0x188>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d017      	beq.n	8002fa8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	6a39      	ldr	r1, [r7, #32]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fcfc 	bl	80039aa <I2C_WaitOnBTFFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d107      	bne.n	8002fd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e01a      	b.n	800300a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d194      	bne.n	8002f06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	00100002 	.word	0x00100002
 8003018:	ffff0000 	.word	0xffff0000

0800301c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	461a      	mov	r2, r3
 8003028:	460b      	mov	r3, r1
 800302a:	817b      	strh	r3, [r7, #10]
 800302c:	4613      	mov	r3, r2
 800302e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003034:	f7ff fa28 	bl	8002488 <HAL_GetTick>
 8003038:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b20      	cmp	r3, #32
 8003044:	f040 823f 	bne.w	80034c6 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2319      	movs	r3, #25
 800304e:	2201      	movs	r2, #1
 8003050:	497f      	ldr	r1, [pc, #508]	; (8003250 <HAL_I2C_Master_Receive+0x234>)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fb92 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800305e:	2302      	movs	r3, #2
 8003060:	e232      	b.n	80034c8 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_I2C_Master_Receive+0x54>
 800306c:	2302      	movs	r3, #2
 800306e:	e22b      	b.n	80034c8 <HAL_I2C_Master_Receive+0x4ac>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d007      	beq.n	8003096 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2222      	movs	r2, #34	; 0x22
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2210      	movs	r2, #16
 80030b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	893a      	ldrh	r2, [r7, #8]
 80030c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4a5f      	ldr	r2, [pc, #380]	; (8003254 <HAL_I2C_Master_Receive+0x238>)
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030d8:	8979      	ldrh	r1, [r7, #10]
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fa7e 	bl	80035e0 <I2C_MasterRequestRead>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e1ec      	b.n	80034c8 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d113      	bne.n	800311e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	e1c0      	b.n	80034a0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	2b01      	cmp	r3, #1
 8003124:	d11e      	bne.n	8003164 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003134:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003136:	b672      	cpsid	i
}
 8003138:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003160:	b662      	cpsie	i
}
 8003162:	e035      	b.n	80031d0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	2b02      	cmp	r3, #2
 800316a:	d11e      	bne.n	80031aa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800317c:	b672      	cpsid	i
}
 800317e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031a6:	b662      	cpsie	i
}
 80031a8:	e012      	b.n	80031d0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80031d0:	e166      	b.n	80034a0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	f200 811f 	bhi.w	800341a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d123      	bne.n	800322c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fc1f 	bl	8003a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e167      	b.n	80034c8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	855a      	strh	r2, [r3, #42]	; 0x2a
 800322a:	e139      	b.n	80034a0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	2b02      	cmp	r3, #2
 8003232:	d152      	bne.n	80032da <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	2200      	movs	r2, #0
 800323c:	4906      	ldr	r1, [pc, #24]	; (8003258 <HAL_I2C_Master_Receive+0x23c>)
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fa9c 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e13c      	b.n	80034c8 <HAL_I2C_Master_Receive+0x4ac>
 800324e:	bf00      	nop
 8003250:	00100002 	.word	0x00100002
 8003254:	ffff0000 	.word	0xffff0000
 8003258:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800325c:	b672      	cpsid	i
}
 800325e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032a2:	b662      	cpsie	i
}
 80032a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d8:	e0e2      	b.n	80034a0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	2200      	movs	r2, #0
 80032e2:	497b      	ldr	r1, [pc, #492]	; (80034d0 <HAL_I2C_Master_Receive+0x4b4>)
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fa49 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0e9      	b.n	80034c8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003302:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003304:	b672      	cpsid	i
}
 8003306:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800333a:	4b66      	ldr	r3, [pc, #408]	; (80034d4 <HAL_I2C_Master_Receive+0x4b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	08db      	lsrs	r3, r3, #3
 8003340:	4a65      	ldr	r2, [pc, #404]	; (80034d8 <HAL_I2C_Master_Receive+0x4bc>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0a1a      	lsrs	r2, r3, #8
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	00da      	lsls	r2, r3, #3
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	3b01      	subs	r3, #1
 8003358:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d118      	bne.n	8003392 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f043 0220 	orr.w	r2, r3, #32
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003382:	b662      	cpsie	i
}
 8003384:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e09a      	b.n	80034c8 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b04      	cmp	r3, #4
 800339e:	d1d9      	bne.n	8003354 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033e2:	b662      	cpsie	i
}
 80033e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003418:	e042      	b.n	80034a0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fb04 	bl	8003a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e04c      	b.n	80034c8 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d118      	bne.n	80034a0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f47f ae94 	bne.w	80031d2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e000      	b.n	80034c8 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
  }
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3728      	adds	r7, #40	; 0x28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	00010004 	.word	0x00010004
 80034d4:	20000000 	.word	0x20000000
 80034d8:	14f8b589 	.word	0x14f8b589

080034dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	460b      	mov	r3, r1
 80034ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d006      	beq.n	8003506 <I2C_MasterRequestWrite+0x2a>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d003      	beq.n	8003506 <I2C_MasterRequestWrite+0x2a>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003504:	d108      	bne.n	8003518 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e00b      	b.n	8003530 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	2b12      	cmp	r3, #18
 800351e:	d107      	bne.n	8003530 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f91d 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003556:	d103      	bne.n	8003560 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e035      	b.n	80035d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800356c:	d108      	bne.n	8003580 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800356e:	897b      	ldrh	r3, [r7, #10]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800357c:	611a      	str	r2, [r3, #16]
 800357e:	e01b      	b.n	80035b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003580:	897b      	ldrh	r3, [r7, #10]
 8003582:	11db      	asrs	r3, r3, #7
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f003 0306 	and.w	r3, r3, #6
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f063 030f 	orn	r3, r3, #15
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	490e      	ldr	r1, [pc, #56]	; (80035d8 <I2C_MasterRequestWrite+0xfc>)
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f943 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e010      	b.n	80035d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4907      	ldr	r1, [pc, #28]	; (80035dc <I2C_MasterRequestWrite+0x100>)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f933 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	00010008 	.word	0x00010008
 80035dc:	00010002 	.word	0x00010002

080035e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	460b      	mov	r3, r1
 80035ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003604:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b08      	cmp	r3, #8
 800360a:	d006      	beq.n	800361a <I2C_MasterRequestRead+0x3a>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d003      	beq.n	800361a <I2C_MasterRequestRead+0x3a>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003618:	d108      	bne.n	800362c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e00b      	b.n	8003644 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	2b11      	cmp	r3, #17
 8003632:	d107      	bne.n	8003644 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003642:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f893 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00d      	beq.n	8003678 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800366a:	d103      	bne.n	8003674 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003672:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e079      	b.n	800376c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003680:	d108      	bne.n	8003694 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003682:	897b      	ldrh	r3, [r7, #10]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	b2da      	uxtb	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	611a      	str	r2, [r3, #16]
 8003692:	e05f      	b.n	8003754 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003694:	897b      	ldrh	r3, [r7, #10]
 8003696:	11db      	asrs	r3, r3, #7
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f003 0306 	and.w	r3, r3, #6
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	f063 030f 	orn	r3, r3, #15
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4930      	ldr	r1, [pc, #192]	; (8003774 <I2C_MasterRequestRead+0x194>)
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f8b9 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e054      	b.n	800376c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036c2:	897b      	ldrh	r3, [r7, #10]
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	4929      	ldr	r1, [pc, #164]	; (8003778 <I2C_MasterRequestRead+0x198>)
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f8a9 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e044      	b.n	800376c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003706:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f831 	bl	800377c <I2C_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00d      	beq.n	800373c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372e:	d103      	bne.n	8003738 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e017      	b.n	800376c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800373c:	897b      	ldrh	r3, [r7, #10]
 800373e:	11db      	asrs	r3, r3, #7
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f003 0306 	and.w	r3, r3, #6
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f063 030e 	orn	r3, r3, #14
 800374c:	b2da      	uxtb	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4907      	ldr	r1, [pc, #28]	; (8003778 <I2C_MasterRequestRead+0x198>)
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f865 	bl	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	00010008 	.word	0x00010008
 8003778:	00010002 	.word	0x00010002

0800377c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	4613      	mov	r3, r2
 800378a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800378c:	e025      	b.n	80037da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d021      	beq.n	80037da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fe fe77 	bl	8002488 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d116      	bne.n	80037da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f043 0220 	orr.w	r2, r3, #32
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e023      	b.n	8003822 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	0c1b      	lsrs	r3, r3, #16
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10d      	bne.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4013      	ands	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	e00c      	b.n	800381a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	43da      	mvns	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	429a      	cmp	r2, r3
 800381e:	d0b6      	beq.n	800378e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003838:	e051      	b.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003848:	d123      	bne.n	8003892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003858:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003862:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f043 0204 	orr.w	r2, r3, #4
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e046      	b.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d021      	beq.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	f7fe fdf5 	bl	8002488 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d302      	bcc.n	80038b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e020      	b.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d10c      	bne.n	8003902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	43da      	mvns	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	e00b      	b.n	800391a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	43da      	mvns	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4013      	ands	r3, r2
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d18d      	bne.n	800383a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003934:	e02d      	b.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f8ce 	bl	8003ad8 <I2C_IsAcknowledgeFailed>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e02d      	b.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d021      	beq.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394e:	f7fe fd9b 	bl	8002488 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e007      	b.n	80039a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b80      	cmp	r3, #128	; 0x80
 800399e:	d1ca      	bne.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039b6:	e02d      	b.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f88d 	bl	8003ad8 <I2C_IsAcknowledgeFailed>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e02d      	b.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d021      	beq.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d0:	f7fe fd5a 	bl	8002488 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d302      	bcc.n	80039e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d116      	bne.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e007      	b.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d1ca      	bne.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a38:	e042      	b.n	8003ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d119      	bne.n	8003a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0210 	mvn.w	r2, #16
 8003a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e029      	b.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7c:	f7fe fd04 	bl	8002488 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d302      	bcc.n	8003a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d116      	bne.n	8003ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e007      	b.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d1b5      	bne.n	8003a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aee:	d11b      	bne.n	8003b28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003af8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f043 0204 	orr.w	r2, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e272      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8087 	beq.w	8003c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b54:	4b92      	ldr	r3, [pc, #584]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d00c      	beq.n	8003b7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b60:	4b8f      	ldr	r3, [pc, #572]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d112      	bne.n	8003b92 <HAL_RCC_OscConfig+0x5e>
 8003b6c:	4b8c      	ldr	r3, [pc, #560]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b78:	d10b      	bne.n	8003b92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7a:	4b89      	ldr	r3, [pc, #548]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d06c      	beq.n	8003c60 <HAL_RCC_OscConfig+0x12c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d168      	bne.n	8003c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e24c      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9a:	d106      	bne.n	8003baa <HAL_RCC_OscConfig+0x76>
 8003b9c:	4b80      	ldr	r3, [pc, #512]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a7f      	ldr	r2, [pc, #508]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	e02e      	b.n	8003c08 <HAL_RCC_OscConfig+0xd4>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x98>
 8003bb2:	4b7b      	ldr	r3, [pc, #492]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a7a      	ldr	r2, [pc, #488]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b78      	ldr	r3, [pc, #480]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a77      	ldr	r2, [pc, #476]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e01d      	b.n	8003c08 <HAL_RCC_OscConfig+0xd4>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_RCC_OscConfig+0xbc>
 8003bd6:	4b72      	ldr	r3, [pc, #456]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a71      	ldr	r2, [pc, #452]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	4b6f      	ldr	r3, [pc, #444]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a6e      	ldr	r2, [pc, #440]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e00b      	b.n	8003c08 <HAL_RCC_OscConfig+0xd4>
 8003bf0:	4b6b      	ldr	r3, [pc, #428]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a6a      	ldr	r2, [pc, #424]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	4b68      	ldr	r3, [pc, #416]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a67      	ldr	r2, [pc, #412]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d013      	beq.n	8003c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fe fc3a 	bl	8002488 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fe fc36 	bl	8002488 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e200      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	4b5d      	ldr	r3, [pc, #372]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0xe4>
 8003c36:	e014      	b.n	8003c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c38:	f7fe fc26 	bl	8002488 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c40:	f7fe fc22 	bl	8002488 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	; 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e1ec      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c52:	4b53      	ldr	r3, [pc, #332]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x10c>
 8003c5e:	e000      	b.n	8003c62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d063      	beq.n	8003d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c6e:	4b4c      	ldr	r3, [pc, #304]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c7a:	4b49      	ldr	r3, [pc, #292]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d11c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x18c>
 8003c86:	4b46      	ldr	r3, [pc, #280]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d116      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c92:	4b43      	ldr	r3, [pc, #268]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_RCC_OscConfig+0x176>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d001      	beq.n	8003caa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e1c0      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003caa:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4939      	ldr	r1, [pc, #228]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cbe:	e03a      	b.n	8003d36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d020      	beq.n	8003d0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc8:	4b36      	ldr	r3, [pc, #216]	; (8003da4 <HAL_RCC_OscConfig+0x270>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cce:	f7fe fbdb 	bl	8002488 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd6:	f7fe fbd7 	bl	8002488 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e1a1      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf4:	4b2a      	ldr	r3, [pc, #168]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4927      	ldr	r1, [pc, #156]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]
 8003d08:	e015      	b.n	8003d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0a:	4b26      	ldr	r3, [pc, #152]	; (8003da4 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fe fbba 	bl	8002488 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d18:	f7fe fbb6 	bl	8002488 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e180      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d03a      	beq.n	8003db8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d019      	beq.n	8003d7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4a:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d50:	f7fe fb9a 	bl	8002488 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d58:	f7fe fb96 	bl	8002488 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e160      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d76:	2001      	movs	r0, #1
 8003d78:	f000 fad8 	bl	800432c <RCC_Delay>
 8003d7c:	e01c      	b.n	8003db8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_RCC_OscConfig+0x274>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d84:	f7fe fb80 	bl	8002488 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8a:	e00f      	b.n	8003dac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8c:	f7fe fb7c 	bl	8002488 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d908      	bls.n	8003dac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e146      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000
 8003da4:	42420000 	.word	0x42420000
 8003da8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dac:	4b92      	ldr	r3, [pc, #584]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e9      	bne.n	8003d8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80a6 	beq.w	8003f12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dca:	4b8b      	ldr	r3, [pc, #556]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10d      	bne.n	8003df2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd6:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4a87      	ldr	r2, [pc, #540]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de0:	61d3      	str	r3, [r2, #28]
 8003de2:	4b85      	ldr	r3, [pc, #532]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df2:	4b82      	ldr	r3, [pc, #520]	; (8003ffc <HAL_RCC_OscConfig+0x4c8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d118      	bne.n	8003e30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dfe:	4b7f      	ldr	r3, [pc, #508]	; (8003ffc <HAL_RCC_OscConfig+0x4c8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a7e      	ldr	r2, [pc, #504]	; (8003ffc <HAL_RCC_OscConfig+0x4c8>)
 8003e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e0a:	f7fe fb3d 	bl	8002488 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e12:	f7fe fb39 	bl	8002488 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b64      	cmp	r3, #100	; 0x64
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e103      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e24:	4b75      	ldr	r3, [pc, #468]	; (8003ffc <HAL_RCC_OscConfig+0x4c8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d106      	bne.n	8003e46 <HAL_RCC_OscConfig+0x312>
 8003e38:	4b6f      	ldr	r3, [pc, #444]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	4a6e      	ldr	r2, [pc, #440]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	6213      	str	r3, [r2, #32]
 8003e44:	e02d      	b.n	8003ea2 <HAL_RCC_OscConfig+0x36e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x334>
 8003e4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	4a69      	ldr	r2, [pc, #420]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6213      	str	r3, [r2, #32]
 8003e5a:	4b67      	ldr	r3, [pc, #412]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	4a66      	ldr	r2, [pc, #408]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	6213      	str	r3, [r2, #32]
 8003e66:	e01c      	b.n	8003ea2 <HAL_RCC_OscConfig+0x36e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b05      	cmp	r3, #5
 8003e6e:	d10c      	bne.n	8003e8a <HAL_RCC_OscConfig+0x356>
 8003e70:	4b61      	ldr	r3, [pc, #388]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	4a60      	ldr	r2, [pc, #384]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e76:	f043 0304 	orr.w	r3, r3, #4
 8003e7a:	6213      	str	r3, [r2, #32]
 8003e7c:	4b5e      	ldr	r3, [pc, #376]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	4a5d      	ldr	r2, [pc, #372]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	6213      	str	r3, [r2, #32]
 8003e88:	e00b      	b.n	8003ea2 <HAL_RCC_OscConfig+0x36e>
 8003e8a:	4b5b      	ldr	r3, [pc, #364]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4a5a      	ldr	r2, [pc, #360]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	6213      	str	r3, [r2, #32]
 8003e96:	4b58      	ldr	r3, [pc, #352]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	4a57      	ldr	r2, [pc, #348]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003e9c:	f023 0304 	bic.w	r3, r3, #4
 8003ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d015      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eaa:	f7fe faed 	bl	8002488 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb2:	f7fe fae9 	bl	8002488 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e0b1      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec8:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ee      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x37e>
 8003ed4:	e014      	b.n	8003f00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed6:	f7fe fad7 	bl	8002488 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fe fad3 	bl	8002488 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e09b      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef4:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1ee      	bne.n	8003ede <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d105      	bne.n	8003f12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f06:	4b3c      	ldr	r3, [pc, #240]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4a3b      	ldr	r2, [pc, #236]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8087 	beq.w	800402a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f1c:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 030c 	and.w	r3, r3, #12
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d061      	beq.n	8003fec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d146      	bne.n	8003fbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f30:	4b33      	ldr	r3, [pc, #204]	; (8004000 <HAL_RCC_OscConfig+0x4cc>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f36:	f7fe faa7 	bl	8002488 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7fe faa3 	bl	8002488 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e06d      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f50:	4b29      	ldr	r3, [pc, #164]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f0      	bne.n	8003f3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f64:	d108      	bne.n	8003f78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f66:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	4921      	ldr	r1, [pc, #132]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f78:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a19      	ldr	r1, [r3, #32]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	491b      	ldr	r1, [pc, #108]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f90:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x4cc>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f96:	f7fe fa77 	bl	8002488 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9e:	f7fe fa73 	bl	8002488 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e03d      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x46a>
 8003fbc:	e035      	b.n	800402a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbe:	4b10      	ldr	r3, [pc, #64]	; (8004000 <HAL_RCC_OscConfig+0x4cc>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fa60 	bl	8002488 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fe fa5c 	bl	8002488 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e026      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x498>
 8003fea:	e01e      	b.n	800402a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d107      	bne.n	8004004 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e019      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40007000 	.word	0x40007000
 8004000:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_RCC_OscConfig+0x500>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	429a      	cmp	r2, r3
 8004016:	d106      	bne.n	8004026 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d001      	beq.n	800402a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000

08004038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0d0      	b.n	80041ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800404c:	4b6a      	ldr	r3, [pc, #424]	; (80041f8 <HAL_RCC_ClockConfig+0x1c0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d910      	bls.n	800407c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405a:	4b67      	ldr	r3, [pc, #412]	; (80041f8 <HAL_RCC_ClockConfig+0x1c0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 0207 	bic.w	r2, r3, #7
 8004062:	4965      	ldr	r1, [pc, #404]	; (80041f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b63      	ldr	r3, [pc, #396]	; (80041f8 <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0b8      	b.n	80041ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d020      	beq.n	80040ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004094:	4b59      	ldr	r3, [pc, #356]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4a58      	ldr	r2, [pc, #352]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 800409a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800409e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ac:	4b53      	ldr	r3, [pc, #332]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4a52      	ldr	r2, [pc, #328]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 80040b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b8:	4b50      	ldr	r3, [pc, #320]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	494d      	ldr	r1, [pc, #308]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d040      	beq.n	8004158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	4b47      	ldr	r3, [pc, #284]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d115      	bne.n	8004116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e07f      	b.n	80041ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d107      	bne.n	8004106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f6:	4b41      	ldr	r3, [pc, #260]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e073      	b.n	80041ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004106:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e06b      	b.n	80041ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004116:	4b39      	ldr	r3, [pc, #228]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f023 0203 	bic.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4936      	ldr	r1, [pc, #216]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004128:	f7fe f9ae 	bl	8002488 <HAL_GetTick>
 800412c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	e00a      	b.n	8004146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004130:	f7fe f9aa 	bl	8002488 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e053      	b.n	80041ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004146:	4b2d      	ldr	r3, [pc, #180]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 020c 	and.w	r2, r3, #12
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	429a      	cmp	r2, r3
 8004156:	d1eb      	bne.n	8004130 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004158:	4b27      	ldr	r3, [pc, #156]	; (80041f8 <HAL_RCC_ClockConfig+0x1c0>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d210      	bcs.n	8004188 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 0207 	bic.w	r2, r3, #7
 800416e:	4922      	ldr	r1, [pc, #136]	; (80041f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e032      	b.n	80041ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004194:	4b19      	ldr	r3, [pc, #100]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4916      	ldr	r1, [pc, #88]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	490e      	ldr	r1, [pc, #56]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041c6:	f000 f821 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80041ca:	4602      	mov	r2, r0
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	490a      	ldr	r1, [pc, #40]	; (8004200 <HAL_RCC_ClockConfig+0x1c8>)
 80041d8:	5ccb      	ldrb	r3, [r1, r3]
 80041da:	fa22 f303 	lsr.w	r3, r2, r3
 80041de:	4a09      	ldr	r2, [pc, #36]	; (8004204 <HAL_RCC_ClockConfig+0x1cc>)
 80041e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_ClockConfig+0x1d0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe f90c 	bl	8002404 <HAL_InitTick>

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40022000 	.word	0x40022000
 80041fc:	40021000 	.word	0x40021000
 8004200:	08006de4 	.word	0x08006de4
 8004204:	20000000 	.word	0x20000000
 8004208:	20000004 	.word	0x20000004

0800420c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800420c:	b490      	push	{r4, r7}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004212:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004214:	1d3c      	adds	r4, r7, #4
 8004216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800421c:	f240 2301 	movw	r3, #513	; 0x201
 8004220:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	2300      	movs	r3, #0
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004236:	4b21      	ldr	r3, [pc, #132]	; (80042bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b04      	cmp	r3, #4
 8004244:	d002      	beq.n	800424c <HAL_RCC_GetSysClockFreq+0x40>
 8004246:	2b08      	cmp	r3, #8
 8004248:	d003      	beq.n	8004252 <HAL_RCC_GetSysClockFreq+0x46>
 800424a:	e02b      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800424c:	4b1c      	ldr	r3, [pc, #112]	; (80042c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800424e:	623b      	str	r3, [r7, #32]
      break;
 8004250:	e02b      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	0c9b      	lsrs	r3, r3, #18
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	3328      	adds	r3, #40	; 0x28
 800425c:	443b      	add	r3, r7
 800425e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004262:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d012      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800426e:	4b13      	ldr	r3, [pc, #76]	; (80042bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	0c5b      	lsrs	r3, r3, #17
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	3328      	adds	r3, #40	; 0x28
 800427a:	443b      	add	r3, r7
 800427c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004280:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	4a0e      	ldr	r2, [pc, #56]	; (80042c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004286:	fb03 f202 	mul.w	r2, r3, r2
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
 8004292:	e004      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	4a0b      	ldr	r2, [pc, #44]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004298:	fb02 f303 	mul.w	r3, r2, r3
 800429c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	623b      	str	r3, [r7, #32]
      break;
 80042a2:	e002      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80042a6:	623b      	str	r3, [r7, #32]
      break;
 80042a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042aa:	6a3b      	ldr	r3, [r7, #32]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3728      	adds	r7, #40	; 0x28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc90      	pop	{r4, r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	08006dd4 	.word	0x08006dd4
 80042bc:	40021000 	.word	0x40021000
 80042c0:	007a1200 	.word	0x007a1200
 80042c4:	003d0900 	.word	0x003d0900

080042c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042cc:	4b02      	ldr	r3, [pc, #8]	; (80042d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr
 80042d8:	20000000 	.word	0x20000000

080042dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042e0:	f7ff fff2 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	0a1b      	lsrs	r3, r3, #8
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	4903      	ldr	r1, [pc, #12]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f2:	5ccb      	ldrb	r3, [r1, r3]
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40021000 	.word	0x40021000
 8004300:	08006df4 	.word	0x08006df4

08004304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004308:	f7ff ffde 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 800430c:	4602      	mov	r2, r0
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	0adb      	lsrs	r3, r3, #11
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4903      	ldr	r1, [pc, #12]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800431a:	5ccb      	ldrb	r3, [r1, r3]
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40021000 	.word	0x40021000
 8004328:	08006df4 	.word	0x08006df4

0800432c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <RCC_Delay+0x34>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <RCC_Delay+0x38>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	0a5b      	lsrs	r3, r3, #9
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004348:	bf00      	nop
  }
  while (Delay --);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1e5a      	subs	r2, r3, #1
 800434e:	60fa      	str	r2, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f9      	bne.n	8004348 <RCC_Delay+0x1c>
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr
 8004360:	20000000 	.word	0x20000000
 8004364:	10624dd3 	.word	0x10624dd3

08004368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e041      	b.n	80043fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fd fee6 	bl	8002160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f000 fa7a 	bl	80048a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d001      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e03a      	b.n	8004496 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <HAL_TIM_Base_Start_IT+0x98>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00e      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x58>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d009      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x58>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a14      	ldr	r2, [pc, #80]	; (80044a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x58>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d111      	bne.n	8004484 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b06      	cmp	r3, #6
 8004470:	d010      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004482:	e007      	b.n	8004494 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800

080044ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d122      	bne.n	8004508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d11b      	bne.n	8004508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0202 	mvn.w	r2, #2
 80044d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f9ba 	bl	8004868 <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f9ad 	bl	8004856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f9bc 	bl	800487a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b04      	cmp	r3, #4
 8004514:	d122      	bne.n	800455c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b04      	cmp	r3, #4
 8004522:	d11b      	bne.n	800455c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0204 	mvn.w	r2, #4
 800452c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f990 	bl	8004868 <HAL_TIM_IC_CaptureCallback>
 8004548:	e005      	b.n	8004556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f983 	bl	8004856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f992 	bl	800487a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b08      	cmp	r3, #8
 8004568:	d122      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b08      	cmp	r3, #8
 8004576:	d11b      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0208 	mvn.w	r2, #8
 8004580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2204      	movs	r2, #4
 8004586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f966 	bl	8004868 <HAL_TIM_IC_CaptureCallback>
 800459c:	e005      	b.n	80045aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f959 	bl	8004856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f968 	bl	800487a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b10      	cmp	r3, #16
 80045bc:	d122      	bne.n	8004604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d11b      	bne.n	8004604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0210 	mvn.w	r2, #16
 80045d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2208      	movs	r2, #8
 80045da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f93c 	bl	8004868 <HAL_TIM_IC_CaptureCallback>
 80045f0:	e005      	b.n	80045fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f92f 	bl	8004856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f93e 	bl	800487a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d10e      	bne.n	8004630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d107      	bne.n	8004630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0201 	mvn.w	r2, #1
 8004628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f90a 	bl	8004844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	d10e      	bne.n	800465c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	2b80      	cmp	r3, #128	; 0x80
 800464a:	d107      	bne.n	800465c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa81 	bl	8004b5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	d10e      	bne.n	8004688 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d107      	bne.n	8004688 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f902 	bl	800488c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b20      	cmp	r3, #32
 8004694:	d10e      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d107      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0220 	mvn.w	r2, #32
 80046ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa4c 	bl	8004b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046b4:	bf00      	nop
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_TIM_ConfigClockSource+0x18>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e0b3      	b.n	800483c <HAL_TIM_ConfigClockSource+0x180>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470c:	d03e      	beq.n	800478c <HAL_TIM_ConfigClockSource+0xd0>
 800470e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004712:	f200 8087 	bhi.w	8004824 <HAL_TIM_ConfigClockSource+0x168>
 8004716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471a:	f000 8085 	beq.w	8004828 <HAL_TIM_ConfigClockSource+0x16c>
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004722:	d87f      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x168>
 8004724:	2b70      	cmp	r3, #112	; 0x70
 8004726:	d01a      	beq.n	800475e <HAL_TIM_ConfigClockSource+0xa2>
 8004728:	2b70      	cmp	r3, #112	; 0x70
 800472a:	d87b      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x168>
 800472c:	2b60      	cmp	r3, #96	; 0x60
 800472e:	d050      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x116>
 8004730:	2b60      	cmp	r3, #96	; 0x60
 8004732:	d877      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x168>
 8004734:	2b50      	cmp	r3, #80	; 0x50
 8004736:	d03c      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0xf6>
 8004738:	2b50      	cmp	r3, #80	; 0x50
 800473a:	d873      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x168>
 800473c:	2b40      	cmp	r3, #64	; 0x40
 800473e:	d058      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x136>
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d86f      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x168>
 8004744:	2b30      	cmp	r3, #48	; 0x30
 8004746:	d064      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x156>
 8004748:	2b30      	cmp	r3, #48	; 0x30
 800474a:	d86b      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x168>
 800474c:	2b20      	cmp	r3, #32
 800474e:	d060      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x156>
 8004750:	2b20      	cmp	r3, #32
 8004752:	d867      	bhi.n	8004824 <HAL_TIM_ConfigClockSource+0x168>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d05c      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x156>
 8004758:	2b10      	cmp	r3, #16
 800475a:	d05a      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800475c:	e062      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6899      	ldr	r1, [r3, #8]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f000 f970 	bl	8004a52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004780:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	609a      	str	r2, [r3, #8]
      break;
 800478a:	e04e      	b.n	800482a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	6899      	ldr	r1, [r3, #8]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f000 f959 	bl	8004a52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ae:	609a      	str	r2, [r3, #8]
      break;
 80047b0:	e03b      	b.n	800482a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6859      	ldr	r1, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	461a      	mov	r2, r3
 80047c0:	f000 f8d0 	bl	8004964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2150      	movs	r1, #80	; 0x50
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f927 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 80047d0:	e02b      	b.n	800482a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6859      	ldr	r1, [r3, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	461a      	mov	r2, r3
 80047e0:	f000 f8ee 	bl	80049c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2160      	movs	r1, #96	; 0x60
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f917 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 80047f0:	e01b      	b.n	800482a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	461a      	mov	r2, r3
 8004800:	f000 f8b0 	bl	8004964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2140      	movs	r1, #64	; 0x40
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f907 	bl	8004a1e <TIM_ITRx_SetConfig>
      break;
 8004810:	e00b      	b.n	800482a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4619      	mov	r1, r3
 800481c:	4610      	mov	r0, r2
 800481e:	f000 f8fe 	bl	8004a1e <TIM_ITRx_SetConfig>
        break;
 8004822:	e002      	b.n	800482a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004824:	bf00      	nop
 8004826:	e000      	b.n	800482a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004828:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr

0800487a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr
	...

080048a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a29      	ldr	r2, [pc, #164]	; (8004958 <TIM_Base_SetConfig+0xb8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00b      	beq.n	80048d0 <TIM_Base_SetConfig+0x30>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048be:	d007      	beq.n	80048d0 <TIM_Base_SetConfig+0x30>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a26      	ldr	r2, [pc, #152]	; (800495c <TIM_Base_SetConfig+0xbc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_Base_SetConfig+0x30>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a25      	ldr	r2, [pc, #148]	; (8004960 <TIM_Base_SetConfig+0xc0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d108      	bne.n	80048e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <TIM_Base_SetConfig+0xb8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00b      	beq.n	8004902 <TIM_Base_SetConfig+0x62>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f0:	d007      	beq.n	8004902 <TIM_Base_SetConfig+0x62>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a19      	ldr	r2, [pc, #100]	; (800495c <TIM_Base_SetConfig+0xbc>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <TIM_Base_SetConfig+0x62>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a18      	ldr	r2, [pc, #96]	; (8004960 <TIM_Base_SetConfig+0xc0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d108      	bne.n	8004914 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a07      	ldr	r2, [pc, #28]	; (8004958 <TIM_Base_SetConfig+0xb8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d103      	bne.n	8004948 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	615a      	str	r2, [r3, #20]
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800

08004964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f023 0201 	bic.w	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800498e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f023 030a 	bic.w	r3, r3, #10
 80049a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	f023 0210 	bic.w	r2, r3, #16
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	031b      	lsls	r3, r3, #12
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	621a      	str	r2, [r3, #32]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr

08004a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f043 0307 	orr.w	r3, r3, #7
 8004a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	609a      	str	r2, [r3, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr

08004a52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b087      	sub	sp, #28
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	021a      	lsls	r2, r3, #8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	609a      	str	r2, [r3, #8]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e046      	b.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d009      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a10      	ldr	r2, [pc, #64]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d10c      	bne.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800

08004b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr

08004b5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e03f      	b.n	8004c02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fd fb06 	bl	80021a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2224      	movs	r2, #36	; 0x24
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fcc7 	bl	8005548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b08a      	sub	sp, #40	; 0x28
 8004c0e:	af02      	add	r7, sp, #8
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	603b      	str	r3, [r7, #0]
 8004c16:	4613      	mov	r3, r2
 8004c18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d17c      	bne.n	8004d24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_UART_Transmit+0x2c>
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e075      	b.n	8004d26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_UART_Transmit+0x3e>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e06e      	b.n	8004d26 <HAL_UART_Transmit+0x11c>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2221      	movs	r2, #33	; 0x21
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c5e:	f7fd fc13 	bl	8002488 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	88fa      	ldrh	r2, [r7, #6]
 8004c6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c78:	d108      	bne.n	8004c8c <HAL_UART_Transmit+0x82>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	e003      	b.n	8004c94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c9c:	e02a      	b.n	8004cf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2180      	movs	r1, #128	; 0x80
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fab3 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e036      	b.n	8004d26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ccc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	e007      	b.n	8004ce6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1cf      	bne.n	8004c9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2200      	movs	r2, #0
 8004d06:	2140      	movs	r1, #64	; 0x40
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 fa83 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e006      	b.n	8004d26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e000      	b.n	8004d26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d24:	2302      	movs	r3, #2
  }
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3720      	adds	r7, #32
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b08a      	sub	sp, #40	; 0x28
 8004d32:	af02      	add	r7, sp, #8
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	f040 808c 	bne.w	8004e68 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_UART_Receive+0x2e>
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e084      	b.n	8004e6a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_UART_Receive+0x40>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e07d      	b.n	8004e6a <HAL_UART_Receive+0x13c>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2222      	movs	r2, #34	; 0x22
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d8a:	f7fd fb7d 	bl	8002488 <HAL_GetTick>
 8004d8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	88fa      	ldrh	r2, [r7, #6]
 8004d9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da4:	d108      	bne.n	8004db8 <HAL_UART_Receive+0x8a>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d104      	bne.n	8004db8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	e003      	b.n	8004dc0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004dc8:	e043      	b.n	8004e52 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2120      	movs	r1, #32
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fa1d 	bl	8005214 <UART_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e042      	b.n	8004e6a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10c      	bne.n	8004e04 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	3302      	adds	r3, #2
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	e01f      	b.n	8004e44 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0c:	d007      	beq.n	8004e1e <HAL_UART_Receive+0xf0>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <HAL_UART_Receive+0xfe>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	e008      	b.n	8004e3e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3301      	adds	r3, #1
 8004e42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1b6      	bne.n	8004dca <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e000      	b.n	8004e6a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
  }
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3720      	adds	r7, #32
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10d      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x52>
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa99 	bl	80053f6 <UART_Receive_IT>
      return;
 8004ec4:	e17b      	b.n	80051be <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80b1 	beq.w	8005030 <HAL_UART_IRQHandler+0x1bc>
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d105      	bne.n	8004ee4 <HAL_UART_IRQHandler+0x70>
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80a6 	beq.w	8005030 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_UART_IRQHandler+0x90>
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	f043 0201 	orr.w	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_UART_IRQHandler+0xb0>
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	f043 0202 	orr.w	r2, r3, #2
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <HAL_UART_IRQHandler+0xd0>
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	f043 0204 	orr.w	r2, r3, #4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00f      	beq.n	8004f6e <HAL_UART_IRQHandler+0xfa>
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	f003 0320 	and.w	r3, r3, #32
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d104      	bne.n	8004f62 <HAL_UART_IRQHandler+0xee>
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f043 0208 	orr.w	r2, r3, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 811e 	beq.w	80051b4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <HAL_UART_IRQHandler+0x11e>
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fa32 	bl	80053f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf14      	ite	ne
 8004fa0:	2301      	movne	r3, #1
 8004fa2:	2300      	moveq	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <HAL_UART_IRQHandler+0x146>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d031      	beq.n	800501e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f974 	bl	80052a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d023      	beq.n	8005016 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fdc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d013      	beq.n	800500e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	4a76      	ldr	r2, [pc, #472]	; (80051c4 <HAL_UART_IRQHandler+0x350>)
 8004fec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fd fbbe 	bl	8002774 <HAL_DMA_Abort_IT>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d016      	beq.n	800502c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005008:	4610      	mov	r0, r2
 800500a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500c:	e00e      	b.n	800502c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8ec 	bl	80051ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005014:	e00a      	b.n	800502c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8e8 	bl	80051ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501c:	e006      	b.n	800502c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f8e4 	bl	80051ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800502a:	e0c3      	b.n	80051b4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502c:	bf00      	nop
    return;
 800502e:	e0c1      	b.n	80051b4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	2b01      	cmp	r3, #1
 8005036:	f040 80a1 	bne.w	800517c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 809b 	beq.w	800517c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8095 	beq.w	800517c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d04e      	beq.n	8005114 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005080:	8a3b      	ldrh	r3, [r7, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8098 	beq.w	80051b8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800508c:	8a3a      	ldrh	r2, [r7, #16]
 800508e:	429a      	cmp	r2, r3
 8005090:	f080 8092 	bcs.w	80051b8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8a3a      	ldrh	r2, [r7, #16]
 8005098:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d02b      	beq.n	80050fc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0210 	bic.w	r2, r2, #16
 80050f0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fd fb01 	bl	80026fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005104:	b29b      	uxth	r3, r3
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	b29b      	uxth	r3, r3
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f876 	bl	80051fe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005112:	e051      	b.n	80051b8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800511c:	b29b      	uxth	r3, r3
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d047      	beq.n	80051bc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800512c:	8a7b      	ldrh	r3, [r7, #18]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d044      	beq.n	80051bc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005140:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695a      	ldr	r2, [r3, #20]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0201 	bic.w	r2, r2, #1
 8005150:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0210 	bic.w	r2, r2, #16
 800516e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005170:	8a7b      	ldrh	r3, [r7, #18]
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f842 	bl	80051fe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800517a:	e01f      	b.n	80051bc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <HAL_UART_IRQHandler+0x324>
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8c9 	bl	8005328 <UART_Transmit_IT>
    return;
 8005196:	e012      	b.n	80051be <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00d      	beq.n	80051be <HAL_UART_IRQHandler+0x34a>
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f90a 	bl	80053c6 <UART_EndTransmit_IT>
    return;
 80051b2:	e004      	b.n	80051be <HAL_UART_IRQHandler+0x34a>
    return;
 80051b4:	bf00      	nop
 80051b6:	e002      	b.n	80051be <HAL_UART_IRQHandler+0x34a>
      return;
 80051b8:	bf00      	nop
 80051ba:	e000      	b.n	80051be <HAL_UART_IRQHandler+0x34a>
      return;
 80051bc:	bf00      	nop
  }
}
 80051be:	3728      	adds	r7, #40	; 0x28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	08005301 	.word	0x08005301

080051c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr

080051da <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr

080051ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr

080051fe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	460b      	mov	r3, r1
 8005208:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005224:	e02c      	b.n	8005280 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d028      	beq.n	8005280 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <UART_WaitOnFlagUntilTimeout+0x30>
 8005234:	f7fd f928 	bl	8002488 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	429a      	cmp	r2, r3
 8005242:	d21d      	bcs.n	8005280 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005252:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0201 	bic.w	r2, r2, #1
 8005262:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e00f      	b.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4013      	ands	r3, r2
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	429a      	cmp	r2, r3
 800529c:	d0c3      	beq.n	8005226 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0201 	bic.w	r2, r2, #1
 80052ce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d107      	bne.n	80052e8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0210 	bic.w	r2, r2, #16
 80052e6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff ff66 	bl	80051ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b21      	cmp	r3, #33	; 0x21
 800533a:	d13e      	bne.n	80053ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005344:	d114      	bne.n	8005370 <UART_Transmit_IT+0x48>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d110      	bne.n	8005370 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005362:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	1c9a      	adds	r2, r3, #2
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	621a      	str	r2, [r3, #32]
 800536e:	e008      	b.n	8005382 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	1c59      	adds	r1, r3, #1
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6211      	str	r1, [r2, #32]
 800537a:	781a      	ldrb	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29b      	uxth	r3, r3
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	4619      	mov	r1, r3
 8005390:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10f      	bne.n	80053b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e000      	b.n	80053bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053ba:	2302      	movs	r3, #2
  }
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff feee 	bl	80051c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b086      	sub	sp, #24
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b22      	cmp	r3, #34	; 0x22
 8005408:	f040 8099 	bne.w	800553e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005414:	d117      	bne.n	8005446 <UART_Receive_IT+0x50>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d113      	bne.n	8005446 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	b29b      	uxth	r3, r3
 8005430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005434:	b29a      	uxth	r2, r3
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	1c9a      	adds	r2, r3, #2
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	629a      	str	r2, [r3, #40]	; 0x28
 8005444:	e026      	b.n	8005494 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005458:	d007      	beq.n	800546a <UART_Receive_IT+0x74>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <UART_Receive_IT+0x82>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	e008      	b.n	800548a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005484:	b2da      	uxtb	r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005498:	b29b      	uxth	r3, r3
 800549a:	3b01      	subs	r3, #1
 800549c:	b29b      	uxth	r3, r3
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4619      	mov	r1, r3
 80054a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d148      	bne.n	800553a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0220 	bic.w	r2, r2, #32
 80054b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695a      	ldr	r2, [r3, #20]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d123      	bne.n	8005530 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0210 	bic.w	r2, r2, #16
 80054fc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b10      	cmp	r3, #16
 800550a:	d10a      	bne.n	8005522 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff fe68 	bl	80051fe <HAL_UARTEx_RxEventCallback>
 800552e:	e002      	b.n	8005536 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fe52 	bl	80051da <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	e002      	b.n	8005540 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	e000      	b.n	8005540 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800553e:	2302      	movs	r3, #2
  }
}
 8005540:	4618      	mov	r0, r3
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005582:	f023 030c 	bic.w	r3, r3, #12
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6812      	ldr	r2, [r2, #0]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	430b      	orrs	r3, r1
 800558e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2c      	ldr	r2, [pc, #176]	; (800565c <UART_SetConfig+0x114>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d103      	bne.n	80055b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055b0:	f7fe fea8 	bl	8004304 <HAL_RCC_GetPCLK2Freq>
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	e002      	b.n	80055be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055b8:	f7fe fe90 	bl	80042dc <HAL_RCC_GetPCLK1Freq>
 80055bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	009a      	lsls	r2, r3, #2
 80055c8:	441a      	add	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d4:	4a22      	ldr	r2, [pc, #136]	; (8005660 <UART_SetConfig+0x118>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	0119      	lsls	r1, r3, #4
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4613      	mov	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	009a      	lsls	r2, r3, #2
 80055e8:	441a      	add	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055f4:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <UART_SetConfig+0x118>)
 80055f6:	fba3 0302 	umull	r0, r3, r3, r2
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2064      	movs	r0, #100	; 0x64
 80055fe:	fb00 f303 	mul.w	r3, r0, r3
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	3332      	adds	r3, #50	; 0x32
 8005608:	4a15      	ldr	r2, [pc, #84]	; (8005660 <UART_SetConfig+0x118>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005614:	4419      	add	r1, r3
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009a      	lsls	r2, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	fbb2 f2f3 	udiv	r2, r2, r3
 800562c:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <UART_SetConfig+0x118>)
 800562e:	fba3 0302 	umull	r0, r3, r3, r2
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	2064      	movs	r0, #100	; 0x64
 8005636:	fb00 f303 	mul.w	r3, r0, r3
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	3332      	adds	r3, #50	; 0x32
 8005640:	4a07      	ldr	r2, [pc, #28]	; (8005660 <UART_SetConfig+0x118>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	f003 020f 	and.w	r2, r3, #15
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	440a      	add	r2, r1
 8005652:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40013800 	.word	0x40013800
 8005660:	51eb851f 	.word	0x51eb851f

08005664 <__errno>:
 8005664:	4b01      	ldr	r3, [pc, #4]	; (800566c <__errno+0x8>)
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	2000000c 	.word	0x2000000c

08005670 <__libc_init_array>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	2600      	movs	r6, #0
 8005674:	4d0c      	ldr	r5, [pc, #48]	; (80056a8 <__libc_init_array+0x38>)
 8005676:	4c0d      	ldr	r4, [pc, #52]	; (80056ac <__libc_init_array+0x3c>)
 8005678:	1b64      	subs	r4, r4, r5
 800567a:	10a4      	asrs	r4, r4, #2
 800567c:	42a6      	cmp	r6, r4
 800567e:	d109      	bne.n	8005694 <__libc_init_array+0x24>
 8005680:	f001 fb8c 	bl	8006d9c <_init>
 8005684:	2600      	movs	r6, #0
 8005686:	4d0a      	ldr	r5, [pc, #40]	; (80056b0 <__libc_init_array+0x40>)
 8005688:	4c0a      	ldr	r4, [pc, #40]	; (80056b4 <__libc_init_array+0x44>)
 800568a:	1b64      	subs	r4, r4, r5
 800568c:	10a4      	asrs	r4, r4, #2
 800568e:	42a6      	cmp	r6, r4
 8005690:	d105      	bne.n	800569e <__libc_init_array+0x2e>
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	f855 3b04 	ldr.w	r3, [r5], #4
 8005698:	4798      	blx	r3
 800569a:	3601      	adds	r6, #1
 800569c:	e7ee      	b.n	800567c <__libc_init_array+0xc>
 800569e:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a2:	4798      	blx	r3
 80056a4:	3601      	adds	r6, #1
 80056a6:	e7f2      	b.n	800568e <__libc_init_array+0x1e>
 80056a8:	08006e48 	.word	0x08006e48
 80056ac:	08006e48 	.word	0x08006e48
 80056b0:	08006e48 	.word	0x08006e48
 80056b4:	08006e4c 	.word	0x08006e4c

080056b8 <memset>:
 80056b8:	4603      	mov	r3, r0
 80056ba:	4402      	add	r2, r0
 80056bc:	4293      	cmp	r3, r2
 80056be:	d100      	bne.n	80056c2 <memset+0xa>
 80056c0:	4770      	bx	lr
 80056c2:	f803 1b01 	strb.w	r1, [r3], #1
 80056c6:	e7f9      	b.n	80056bc <memset+0x4>

080056c8 <strcpy>:
 80056c8:	4603      	mov	r3, r0
 80056ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056ce:	f803 2b01 	strb.w	r2, [r3], #1
 80056d2:	2a00      	cmp	r2, #0
 80056d4:	d1f9      	bne.n	80056ca <strcpy+0x2>
 80056d6:	4770      	bx	lr

080056d8 <pow>:
 80056d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056dc:	4614      	mov	r4, r2
 80056de:	461d      	mov	r5, r3
 80056e0:	4680      	mov	r8, r0
 80056e2:	4689      	mov	r9, r1
 80056e4:	f000 f8b0 	bl	8005848 <__ieee754_pow>
 80056e8:	4622      	mov	r2, r4
 80056ea:	4606      	mov	r6, r0
 80056ec:	460f      	mov	r7, r1
 80056ee:	462b      	mov	r3, r5
 80056f0:	4620      	mov	r0, r4
 80056f2:	4629      	mov	r1, r5
 80056f4:	f7fb f98a 	bl	8000a0c <__aeabi_dcmpun>
 80056f8:	bbc8      	cbnz	r0, 800576e <pow+0x96>
 80056fa:	2200      	movs	r2, #0
 80056fc:	2300      	movs	r3, #0
 80056fe:	4640      	mov	r0, r8
 8005700:	4649      	mov	r1, r9
 8005702:	f7fb f951 	bl	80009a8 <__aeabi_dcmpeq>
 8005706:	b1b8      	cbz	r0, 8005738 <pow+0x60>
 8005708:	2200      	movs	r2, #0
 800570a:	2300      	movs	r3, #0
 800570c:	4620      	mov	r0, r4
 800570e:	4629      	mov	r1, r5
 8005710:	f7fb f94a 	bl	80009a8 <__aeabi_dcmpeq>
 8005714:	2800      	cmp	r0, #0
 8005716:	d141      	bne.n	800579c <pow+0xc4>
 8005718:	4620      	mov	r0, r4
 800571a:	4629      	mov	r1, r5
 800571c:	f001 fa5f 	bl	8006bde <finite>
 8005720:	b328      	cbz	r0, 800576e <pow+0x96>
 8005722:	2200      	movs	r2, #0
 8005724:	2300      	movs	r3, #0
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	f7fb f947 	bl	80009bc <__aeabi_dcmplt>
 800572e:	b1f0      	cbz	r0, 800576e <pow+0x96>
 8005730:	f7ff ff98 	bl	8005664 <__errno>
 8005734:	2322      	movs	r3, #34	; 0x22
 8005736:	e019      	b.n	800576c <pow+0x94>
 8005738:	4630      	mov	r0, r6
 800573a:	4639      	mov	r1, r7
 800573c:	f001 fa4f 	bl	8006bde <finite>
 8005740:	b9c8      	cbnz	r0, 8005776 <pow+0x9e>
 8005742:	4640      	mov	r0, r8
 8005744:	4649      	mov	r1, r9
 8005746:	f001 fa4a 	bl	8006bde <finite>
 800574a:	b1a0      	cbz	r0, 8005776 <pow+0x9e>
 800574c:	4620      	mov	r0, r4
 800574e:	4629      	mov	r1, r5
 8005750:	f001 fa45 	bl	8006bde <finite>
 8005754:	b178      	cbz	r0, 8005776 <pow+0x9e>
 8005756:	4632      	mov	r2, r6
 8005758:	463b      	mov	r3, r7
 800575a:	4630      	mov	r0, r6
 800575c:	4639      	mov	r1, r7
 800575e:	f7fb f955 	bl	8000a0c <__aeabi_dcmpun>
 8005762:	2800      	cmp	r0, #0
 8005764:	d0e4      	beq.n	8005730 <pow+0x58>
 8005766:	f7ff ff7d 	bl	8005664 <__errno>
 800576a:	2321      	movs	r3, #33	; 0x21
 800576c:	6003      	str	r3, [r0, #0]
 800576e:	4630      	mov	r0, r6
 8005770:	4639      	mov	r1, r7
 8005772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005776:	2200      	movs	r2, #0
 8005778:	2300      	movs	r3, #0
 800577a:	4630      	mov	r0, r6
 800577c:	4639      	mov	r1, r7
 800577e:	f7fb f913 	bl	80009a8 <__aeabi_dcmpeq>
 8005782:	2800      	cmp	r0, #0
 8005784:	d0f3      	beq.n	800576e <pow+0x96>
 8005786:	4640      	mov	r0, r8
 8005788:	4649      	mov	r1, r9
 800578a:	f001 fa28 	bl	8006bde <finite>
 800578e:	2800      	cmp	r0, #0
 8005790:	d0ed      	beq.n	800576e <pow+0x96>
 8005792:	4620      	mov	r0, r4
 8005794:	4629      	mov	r1, r5
 8005796:	f001 fa22 	bl	8006bde <finite>
 800579a:	e7c8      	b.n	800572e <pow+0x56>
 800579c:	2600      	movs	r6, #0
 800579e:	4f01      	ldr	r7, [pc, #4]	; (80057a4 <pow+0xcc>)
 80057a0:	e7e5      	b.n	800576e <pow+0x96>
 80057a2:	bf00      	nop
 80057a4:	3ff00000 	.word	0x3ff00000

080057a8 <powf>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	460c      	mov	r4, r1
 80057ac:	4606      	mov	r6, r0
 80057ae:	f000 fe11 	bl	80063d4 <__ieee754_powf>
 80057b2:	4621      	mov	r1, r4
 80057b4:	4605      	mov	r5, r0
 80057b6:	4620      	mov	r0, r4
 80057b8:	f7fb fc8a 	bl	80010d0 <__aeabi_fcmpun>
 80057bc:	bb68      	cbnz	r0, 800581a <powf+0x72>
 80057be:	2100      	movs	r1, #0
 80057c0:	4630      	mov	r0, r6
 80057c2:	f7fb fc53 	bl	800106c <__aeabi_fcmpeq>
 80057c6:	b190      	cbz	r0, 80057ee <powf+0x46>
 80057c8:	2100      	movs	r1, #0
 80057ca:	4620      	mov	r0, r4
 80057cc:	f7fb fc4e 	bl	800106c <__aeabi_fcmpeq>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d133      	bne.n	800583c <powf+0x94>
 80057d4:	4620      	mov	r0, r4
 80057d6:	f001 fa8c 	bl	8006cf2 <finitef>
 80057da:	b1f0      	cbz	r0, 800581a <powf+0x72>
 80057dc:	2100      	movs	r1, #0
 80057de:	4620      	mov	r0, r4
 80057e0:	f7fb fc4e 	bl	8001080 <__aeabi_fcmplt>
 80057e4:	b1c8      	cbz	r0, 800581a <powf+0x72>
 80057e6:	f7ff ff3d 	bl	8005664 <__errno>
 80057ea:	2322      	movs	r3, #34	; 0x22
 80057ec:	e014      	b.n	8005818 <powf+0x70>
 80057ee:	4628      	mov	r0, r5
 80057f0:	f001 fa7f 	bl	8006cf2 <finitef>
 80057f4:	b998      	cbnz	r0, 800581e <powf+0x76>
 80057f6:	4630      	mov	r0, r6
 80057f8:	f001 fa7b 	bl	8006cf2 <finitef>
 80057fc:	b178      	cbz	r0, 800581e <powf+0x76>
 80057fe:	4620      	mov	r0, r4
 8005800:	f001 fa77 	bl	8006cf2 <finitef>
 8005804:	b158      	cbz	r0, 800581e <powf+0x76>
 8005806:	4629      	mov	r1, r5
 8005808:	4628      	mov	r0, r5
 800580a:	f7fb fc61 	bl	80010d0 <__aeabi_fcmpun>
 800580e:	2800      	cmp	r0, #0
 8005810:	d0e9      	beq.n	80057e6 <powf+0x3e>
 8005812:	f7ff ff27 	bl	8005664 <__errno>
 8005816:	2321      	movs	r3, #33	; 0x21
 8005818:	6003      	str	r3, [r0, #0]
 800581a:	4628      	mov	r0, r5
 800581c:	bd70      	pop	{r4, r5, r6, pc}
 800581e:	2100      	movs	r1, #0
 8005820:	4628      	mov	r0, r5
 8005822:	f7fb fc23 	bl	800106c <__aeabi_fcmpeq>
 8005826:	2800      	cmp	r0, #0
 8005828:	d0f7      	beq.n	800581a <powf+0x72>
 800582a:	4630      	mov	r0, r6
 800582c:	f001 fa61 	bl	8006cf2 <finitef>
 8005830:	2800      	cmp	r0, #0
 8005832:	d0f2      	beq.n	800581a <powf+0x72>
 8005834:	4620      	mov	r0, r4
 8005836:	f001 fa5c 	bl	8006cf2 <finitef>
 800583a:	e7d3      	b.n	80057e4 <powf+0x3c>
 800583c:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8005840:	e7eb      	b.n	800581a <powf+0x72>
 8005842:	0000      	movs	r0, r0
 8005844:	0000      	movs	r0, r0
	...

08005848 <__ieee754_pow>:
 8005848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584c:	b093      	sub	sp, #76	; 0x4c
 800584e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005852:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8005856:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800585a:	4689      	mov	r9, r1
 800585c:	ea56 0102 	orrs.w	r1, r6, r2
 8005860:	4680      	mov	r8, r0
 8005862:	d111      	bne.n	8005888 <__ieee754_pow+0x40>
 8005864:	1803      	adds	r3, r0, r0
 8005866:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800586a:	4152      	adcs	r2, r2
 800586c:	4299      	cmp	r1, r3
 800586e:	4b82      	ldr	r3, [pc, #520]	; (8005a78 <__ieee754_pow+0x230>)
 8005870:	4193      	sbcs	r3, r2
 8005872:	f080 84b9 	bcs.w	80061e8 <__ieee754_pow+0x9a0>
 8005876:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800587a:	4640      	mov	r0, r8
 800587c:	4649      	mov	r1, r9
 800587e:	f7fa fc75 	bl	800016c <__adddf3>
 8005882:	4683      	mov	fp, r0
 8005884:	468c      	mov	ip, r1
 8005886:	e06f      	b.n	8005968 <__ieee754_pow+0x120>
 8005888:	4b7c      	ldr	r3, [pc, #496]	; (8005a7c <__ieee754_pow+0x234>)
 800588a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800588e:	429c      	cmp	r4, r3
 8005890:	464d      	mov	r5, r9
 8005892:	4682      	mov	sl, r0
 8005894:	dc06      	bgt.n	80058a4 <__ieee754_pow+0x5c>
 8005896:	d101      	bne.n	800589c <__ieee754_pow+0x54>
 8005898:	2800      	cmp	r0, #0
 800589a:	d1ec      	bne.n	8005876 <__ieee754_pow+0x2e>
 800589c:	429e      	cmp	r6, r3
 800589e:	dc01      	bgt.n	80058a4 <__ieee754_pow+0x5c>
 80058a0:	d10f      	bne.n	80058c2 <__ieee754_pow+0x7a>
 80058a2:	b172      	cbz	r2, 80058c2 <__ieee754_pow+0x7a>
 80058a4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80058a8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80058ac:	ea55 050a 	orrs.w	r5, r5, sl
 80058b0:	d1e1      	bne.n	8005876 <__ieee754_pow+0x2e>
 80058b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80058b6:	18db      	adds	r3, r3, r3
 80058b8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80058bc:	4152      	adcs	r2, r2
 80058be:	429d      	cmp	r5, r3
 80058c0:	e7d5      	b.n	800586e <__ieee754_pow+0x26>
 80058c2:	2d00      	cmp	r5, #0
 80058c4:	da39      	bge.n	800593a <__ieee754_pow+0xf2>
 80058c6:	4b6e      	ldr	r3, [pc, #440]	; (8005a80 <__ieee754_pow+0x238>)
 80058c8:	429e      	cmp	r6, r3
 80058ca:	dc52      	bgt.n	8005972 <__ieee754_pow+0x12a>
 80058cc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80058d0:	429e      	cmp	r6, r3
 80058d2:	f340 849c 	ble.w	800620e <__ieee754_pow+0x9c6>
 80058d6:	1533      	asrs	r3, r6, #20
 80058d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80058dc:	2b14      	cmp	r3, #20
 80058de:	dd0f      	ble.n	8005900 <__ieee754_pow+0xb8>
 80058e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80058e4:	fa22 f103 	lsr.w	r1, r2, r3
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	4293      	cmp	r3, r2
 80058ee:	f040 848e 	bne.w	800620e <__ieee754_pow+0x9c6>
 80058f2:	f001 0101 	and.w	r1, r1, #1
 80058f6:	f1c1 0302 	rsb	r3, r1, #2
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	b182      	cbz	r2, 8005920 <__ieee754_pow+0xd8>
 80058fe:	e05d      	b.n	80059bc <__ieee754_pow+0x174>
 8005900:	2a00      	cmp	r2, #0
 8005902:	d159      	bne.n	80059b8 <__ieee754_pow+0x170>
 8005904:	f1c3 0314 	rsb	r3, r3, #20
 8005908:	fa46 f103 	asr.w	r1, r6, r3
 800590c:	fa01 f303 	lsl.w	r3, r1, r3
 8005910:	42b3      	cmp	r3, r6
 8005912:	f040 8479 	bne.w	8006208 <__ieee754_pow+0x9c0>
 8005916:	f001 0101 	and.w	r1, r1, #1
 800591a:	f1c1 0302 	rsb	r3, r1, #2
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	4b58      	ldr	r3, [pc, #352]	; (8005a84 <__ieee754_pow+0x23c>)
 8005922:	429e      	cmp	r6, r3
 8005924:	d132      	bne.n	800598c <__ieee754_pow+0x144>
 8005926:	2f00      	cmp	r7, #0
 8005928:	f280 846a 	bge.w	8006200 <__ieee754_pow+0x9b8>
 800592c:	4642      	mov	r2, r8
 800592e:	464b      	mov	r3, r9
 8005930:	2000      	movs	r0, #0
 8005932:	4954      	ldr	r1, [pc, #336]	; (8005a84 <__ieee754_pow+0x23c>)
 8005934:	f7fa fefa 	bl	800072c <__aeabi_ddiv>
 8005938:	e7a3      	b.n	8005882 <__ieee754_pow+0x3a>
 800593a:	2300      	movs	r3, #0
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2a00      	cmp	r2, #0
 8005940:	d13c      	bne.n	80059bc <__ieee754_pow+0x174>
 8005942:	4b4e      	ldr	r3, [pc, #312]	; (8005a7c <__ieee754_pow+0x234>)
 8005944:	429e      	cmp	r6, r3
 8005946:	d1eb      	bne.n	8005920 <__ieee754_pow+0xd8>
 8005948:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800594c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005950:	ea53 030a 	orrs.w	r3, r3, sl
 8005954:	f000 8448 	beq.w	80061e8 <__ieee754_pow+0x9a0>
 8005958:	4b4b      	ldr	r3, [pc, #300]	; (8005a88 <__ieee754_pow+0x240>)
 800595a:	429c      	cmp	r4, r3
 800595c:	dd0b      	ble.n	8005976 <__ieee754_pow+0x12e>
 800595e:	2f00      	cmp	r7, #0
 8005960:	f2c0 8448 	blt.w	80061f4 <__ieee754_pow+0x9ac>
 8005964:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005968:	4658      	mov	r0, fp
 800596a:	4661      	mov	r1, ip
 800596c:	b013      	add	sp, #76	; 0x4c
 800596e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005972:	2302      	movs	r3, #2
 8005974:	e7e2      	b.n	800593c <__ieee754_pow+0xf4>
 8005976:	2f00      	cmp	r7, #0
 8005978:	f04f 0b00 	mov.w	fp, #0
 800597c:	f04f 0c00 	mov.w	ip, #0
 8005980:	daf2      	bge.n	8005968 <__ieee754_pow+0x120>
 8005982:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005986:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800598a:	e7ed      	b.n	8005968 <__ieee754_pow+0x120>
 800598c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005990:	d106      	bne.n	80059a0 <__ieee754_pow+0x158>
 8005992:	4642      	mov	r2, r8
 8005994:	464b      	mov	r3, r9
 8005996:	4640      	mov	r0, r8
 8005998:	4649      	mov	r1, r9
 800599a:	f7fa fd9d 	bl	80004d8 <__aeabi_dmul>
 800599e:	e770      	b.n	8005882 <__ieee754_pow+0x3a>
 80059a0:	4b3a      	ldr	r3, [pc, #232]	; (8005a8c <__ieee754_pow+0x244>)
 80059a2:	429f      	cmp	r7, r3
 80059a4:	d10a      	bne.n	80059bc <__ieee754_pow+0x174>
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	db08      	blt.n	80059bc <__ieee754_pow+0x174>
 80059aa:	4640      	mov	r0, r8
 80059ac:	4649      	mov	r1, r9
 80059ae:	b013      	add	sp, #76	; 0x4c
 80059b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	f000 bc5e 	b.w	8006274 <__ieee754_sqrt>
 80059b8:	2300      	movs	r3, #0
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	4640      	mov	r0, r8
 80059be:	4649      	mov	r1, r9
 80059c0:	f001 f90a 	bl	8006bd8 <fabs>
 80059c4:	4683      	mov	fp, r0
 80059c6:	468c      	mov	ip, r1
 80059c8:	f1ba 0f00 	cmp.w	sl, #0
 80059cc:	d128      	bne.n	8005a20 <__ieee754_pow+0x1d8>
 80059ce:	b124      	cbz	r4, 80059da <__ieee754_pow+0x192>
 80059d0:	4b2c      	ldr	r3, [pc, #176]	; (8005a84 <__ieee754_pow+0x23c>)
 80059d2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d122      	bne.n	8005a20 <__ieee754_pow+0x1d8>
 80059da:	2f00      	cmp	r7, #0
 80059dc:	da07      	bge.n	80059ee <__ieee754_pow+0x1a6>
 80059de:	465a      	mov	r2, fp
 80059e0:	4663      	mov	r3, ip
 80059e2:	2000      	movs	r0, #0
 80059e4:	4927      	ldr	r1, [pc, #156]	; (8005a84 <__ieee754_pow+0x23c>)
 80059e6:	f7fa fea1 	bl	800072c <__aeabi_ddiv>
 80059ea:	4683      	mov	fp, r0
 80059ec:	468c      	mov	ip, r1
 80059ee:	2d00      	cmp	r5, #0
 80059f0:	daba      	bge.n	8005968 <__ieee754_pow+0x120>
 80059f2:	9b00      	ldr	r3, [sp, #0]
 80059f4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80059f8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80059fc:	4323      	orrs	r3, r4
 80059fe:	d108      	bne.n	8005a12 <__ieee754_pow+0x1ca>
 8005a00:	465a      	mov	r2, fp
 8005a02:	4663      	mov	r3, ip
 8005a04:	4658      	mov	r0, fp
 8005a06:	4661      	mov	r1, ip
 8005a08:	f7fa fbae 	bl	8000168 <__aeabi_dsub>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	e790      	b.n	8005934 <__ieee754_pow+0xec>
 8005a12:	9b00      	ldr	r3, [sp, #0]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d1a7      	bne.n	8005968 <__ieee754_pow+0x120>
 8005a18:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005a1c:	469c      	mov	ip, r3
 8005a1e:	e7a3      	b.n	8005968 <__ieee754_pow+0x120>
 8005a20:	0feb      	lsrs	r3, r5, #31
 8005a22:	3b01      	subs	r3, #1
 8005a24:	930c      	str	r3, [sp, #48]	; 0x30
 8005a26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a28:	9b00      	ldr	r3, [sp, #0]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d104      	bne.n	8005a38 <__ieee754_pow+0x1f0>
 8005a2e:	4642      	mov	r2, r8
 8005a30:	464b      	mov	r3, r9
 8005a32:	4640      	mov	r0, r8
 8005a34:	4649      	mov	r1, r9
 8005a36:	e7e7      	b.n	8005a08 <__ieee754_pow+0x1c0>
 8005a38:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <__ieee754_pow+0x248>)
 8005a3a:	429e      	cmp	r6, r3
 8005a3c:	f340 80f6 	ble.w	8005c2c <__ieee754_pow+0x3e4>
 8005a40:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005a44:	429e      	cmp	r6, r3
 8005a46:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <__ieee754_pow+0x240>)
 8005a48:	dd09      	ble.n	8005a5e <__ieee754_pow+0x216>
 8005a4a:	429c      	cmp	r4, r3
 8005a4c:	dc0c      	bgt.n	8005a68 <__ieee754_pow+0x220>
 8005a4e:	2f00      	cmp	r7, #0
 8005a50:	da0c      	bge.n	8005a6c <__ieee754_pow+0x224>
 8005a52:	2000      	movs	r0, #0
 8005a54:	b013      	add	sp, #76	; 0x4c
 8005a56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5a:	f001 b89b 	b.w	8006b94 <__math_oflow>
 8005a5e:	429c      	cmp	r4, r3
 8005a60:	dbf5      	blt.n	8005a4e <__ieee754_pow+0x206>
 8005a62:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <__ieee754_pow+0x23c>)
 8005a64:	429c      	cmp	r4, r3
 8005a66:	dd15      	ble.n	8005a94 <__ieee754_pow+0x24c>
 8005a68:	2f00      	cmp	r7, #0
 8005a6a:	dcf2      	bgt.n	8005a52 <__ieee754_pow+0x20a>
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	b013      	add	sp, #76	; 0x4c
 8005a70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	f001 b889 	b.w	8006b8a <__math_uflow>
 8005a78:	fff00000 	.word	0xfff00000
 8005a7c:	7ff00000 	.word	0x7ff00000
 8005a80:	433fffff 	.word	0x433fffff
 8005a84:	3ff00000 	.word	0x3ff00000
 8005a88:	3fefffff 	.word	0x3fefffff
 8005a8c:	3fe00000 	.word	0x3fe00000
 8005a90:	41e00000 	.word	0x41e00000
 8005a94:	4661      	mov	r1, ip
 8005a96:	2200      	movs	r2, #0
 8005a98:	4658      	mov	r0, fp
 8005a9a:	4b5f      	ldr	r3, [pc, #380]	; (8005c18 <__ieee754_pow+0x3d0>)
 8005a9c:	f7fa fb64 	bl	8000168 <__aeabi_dsub>
 8005aa0:	a355      	add	r3, pc, #340	; (adr r3, 8005bf8 <__ieee754_pow+0x3b0>)
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	460d      	mov	r5, r1
 8005aaa:	f7fa fd15 	bl	80004d8 <__aeabi_dmul>
 8005aae:	a354      	add	r3, pc, #336	; (adr r3, 8005c00 <__ieee754_pow+0x3b8>)
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	460f      	mov	r7, r1
 8005ab8:	4620      	mov	r0, r4
 8005aba:	4629      	mov	r1, r5
 8005abc:	f7fa fd0c 	bl	80004d8 <__aeabi_dmul>
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4682      	mov	sl, r0
 8005ac4:	468b      	mov	fp, r1
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4b54      	ldr	r3, [pc, #336]	; (8005c1c <__ieee754_pow+0x3d4>)
 8005acc:	f7fa fd04 	bl	80004d8 <__aeabi_dmul>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	a14c      	add	r1, pc, #304	; (adr r1, 8005c08 <__ieee754_pow+0x3c0>)
 8005ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ada:	f7fa fb45 	bl	8000168 <__aeabi_dsub>
 8005ade:	4622      	mov	r2, r4
 8005ae0:	462b      	mov	r3, r5
 8005ae2:	f7fa fcf9 	bl	80004d8 <__aeabi_dmul>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	2000      	movs	r0, #0
 8005aec:	494c      	ldr	r1, [pc, #304]	; (8005c20 <__ieee754_pow+0x3d8>)
 8005aee:	f7fa fb3b 	bl	8000168 <__aeabi_dsub>
 8005af2:	4622      	mov	r2, r4
 8005af4:	462b      	mov	r3, r5
 8005af6:	4680      	mov	r8, r0
 8005af8:	4689      	mov	r9, r1
 8005afa:	4620      	mov	r0, r4
 8005afc:	4629      	mov	r1, r5
 8005afe:	f7fa fceb 	bl	80004d8 <__aeabi_dmul>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4640      	mov	r0, r8
 8005b08:	4649      	mov	r1, r9
 8005b0a:	f7fa fce5 	bl	80004d8 <__aeabi_dmul>
 8005b0e:	a340      	add	r3, pc, #256	; (adr r3, 8005c10 <__ieee754_pow+0x3c8>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa fce0 	bl	80004d8 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4650      	mov	r0, sl
 8005b1e:	4659      	mov	r1, fp
 8005b20:	f7fa fb22 	bl	8000168 <__aeabi_dsub>
 8005b24:	f04f 0a00 	mov.w	sl, #0
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	460d      	mov	r5, r1
 8005b30:	4630      	mov	r0, r6
 8005b32:	4639      	mov	r1, r7
 8005b34:	f7fa fb1a 	bl	800016c <__adddf3>
 8005b38:	4632      	mov	r2, r6
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	4650      	mov	r0, sl
 8005b3e:	468b      	mov	fp, r1
 8005b40:	f7fa fb12 	bl	8000168 <__aeabi_dsub>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4620      	mov	r0, r4
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	f7fa fb0c 	bl	8000168 <__aeabi_dsub>
 8005b50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b54:	9b00      	ldr	r3, [sp, #0]
 8005b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f04f 0600 	mov.w	r6, #0
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	bf0c      	ite	eq
 8005b66:	4b2f      	ldreq	r3, [pc, #188]	; (8005c24 <__ieee754_pow+0x3dc>)
 8005b68:	4b2b      	ldrne	r3, [pc, #172]	; (8005c18 <__ieee754_pow+0x3d0>)
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	460d      	mov	r5, r1
 8005b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b72:	e9cd 2300 	strd	r2, r3, [sp]
 8005b76:	4632      	mov	r2, r6
 8005b78:	463b      	mov	r3, r7
 8005b7a:	f7fa faf5 	bl	8000168 <__aeabi_dsub>
 8005b7e:	4652      	mov	r2, sl
 8005b80:	465b      	mov	r3, fp
 8005b82:	f7fa fca9 	bl	80004d8 <__aeabi_dmul>
 8005b86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b8a:	4680      	mov	r8, r0
 8005b8c:	4689      	mov	r9, r1
 8005b8e:	4620      	mov	r0, r4
 8005b90:	4629      	mov	r1, r5
 8005b92:	f7fa fca1 	bl	80004d8 <__aeabi_dmul>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	f7fa fae5 	bl	800016c <__adddf3>
 8005ba2:	4632      	mov	r2, r6
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	4680      	mov	r8, r0
 8005ba8:	4689      	mov	r9, r1
 8005baa:	4650      	mov	r0, sl
 8005bac:	4659      	mov	r1, fp
 8005bae:	f7fa fc93 	bl	80004d8 <__aeabi_dmul>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	460d      	mov	r5, r1
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4602      	mov	r2, r0
 8005bba:	4649      	mov	r1, r9
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005bc2:	f7fa fad3 	bl	800016c <__adddf3>
 8005bc6:	4b18      	ldr	r3, [pc, #96]	; (8005c28 <__ieee754_pow+0x3e0>)
 8005bc8:	4682      	mov	sl, r0
 8005bca:	4299      	cmp	r1, r3
 8005bcc:	460f      	mov	r7, r1
 8005bce:	460e      	mov	r6, r1
 8005bd0:	f340 82e5 	ble.w	800619e <__ieee754_pow+0x956>
 8005bd4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005bd8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005bdc:	4303      	orrs	r3, r0
 8005bde:	f000 81df 	beq.w	8005fa0 <__ieee754_pow+0x758>
 8005be2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005be6:	2200      	movs	r2, #0
 8005be8:	2300      	movs	r3, #0
 8005bea:	f7fa fee7 	bl	80009bc <__aeabi_dcmplt>
 8005bee:	3800      	subs	r0, #0
 8005bf0:	bf18      	it	ne
 8005bf2:	2001      	movne	r0, #1
 8005bf4:	e72e      	b.n	8005a54 <__ieee754_pow+0x20c>
 8005bf6:	bf00      	nop
 8005bf8:	60000000 	.word	0x60000000
 8005bfc:	3ff71547 	.word	0x3ff71547
 8005c00:	f85ddf44 	.word	0xf85ddf44
 8005c04:	3e54ae0b 	.word	0x3e54ae0b
 8005c08:	55555555 	.word	0x55555555
 8005c0c:	3fd55555 	.word	0x3fd55555
 8005c10:	652b82fe 	.word	0x652b82fe
 8005c14:	3ff71547 	.word	0x3ff71547
 8005c18:	3ff00000 	.word	0x3ff00000
 8005c1c:	3fd00000 	.word	0x3fd00000
 8005c20:	3fe00000 	.word	0x3fe00000
 8005c24:	bff00000 	.word	0xbff00000
 8005c28:	408fffff 	.word	0x408fffff
 8005c2c:	4bd2      	ldr	r3, [pc, #840]	; (8005f78 <__ieee754_pow+0x730>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	402b      	ands	r3, r5
 8005c32:	b943      	cbnz	r3, 8005c46 <__ieee754_pow+0x3fe>
 8005c34:	4658      	mov	r0, fp
 8005c36:	4661      	mov	r1, ip
 8005c38:	4bd0      	ldr	r3, [pc, #832]	; (8005f7c <__ieee754_pow+0x734>)
 8005c3a:	f7fa fc4d 	bl	80004d8 <__aeabi_dmul>
 8005c3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005c42:	4683      	mov	fp, r0
 8005c44:	460c      	mov	r4, r1
 8005c46:	1523      	asrs	r3, r4, #20
 8005c48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005c4c:	4413      	add	r3, r2
 8005c4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c50:	4bcb      	ldr	r3, [pc, #812]	; (8005f80 <__ieee754_pow+0x738>)
 8005c52:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005c56:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005c5a:	429c      	cmp	r4, r3
 8005c5c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005c60:	dd08      	ble.n	8005c74 <__ieee754_pow+0x42c>
 8005c62:	4bc8      	ldr	r3, [pc, #800]	; (8005f84 <__ieee754_pow+0x73c>)
 8005c64:	429c      	cmp	r4, r3
 8005c66:	f340 8199 	ble.w	8005f9c <__ieee754_pow+0x754>
 8005c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c6c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005c70:	3301      	adds	r3, #1
 8005c72:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c74:	2600      	movs	r6, #0
 8005c76:	00f3      	lsls	r3, r6, #3
 8005c78:	930d      	str	r3, [sp, #52]	; 0x34
 8005c7a:	4bc3      	ldr	r3, [pc, #780]	; (8005f88 <__ieee754_pow+0x740>)
 8005c7c:	4658      	mov	r0, fp
 8005c7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005c82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c86:	4629      	mov	r1, r5
 8005c88:	461a      	mov	r2, r3
 8005c8a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005c8e:	4623      	mov	r3, r4
 8005c90:	f7fa fa6a 	bl	8000168 <__aeabi_dsub>
 8005c94:	46da      	mov	sl, fp
 8005c96:	462b      	mov	r3, r5
 8005c98:	4652      	mov	r2, sl
 8005c9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005c9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ca2:	f7fa fa63 	bl	800016c <__adddf3>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	2000      	movs	r0, #0
 8005cac:	49b7      	ldr	r1, [pc, #732]	; (8005f8c <__ieee754_pow+0x744>)
 8005cae:	f7fa fd3d 	bl	800072c <__aeabi_ddiv>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005cbe:	f7fa fc0b 	bl	80004d8 <__aeabi_dmul>
 8005cc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005cc6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005cca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	46ab      	mov	fp, r5
 8005cd4:	106d      	asrs	r5, r5, #1
 8005cd6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005cda:	9304      	str	r3, [sp, #16]
 8005cdc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005ce0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005ce4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8005ce8:	4640      	mov	r0, r8
 8005cea:	4649      	mov	r1, r9
 8005cec:	4614      	mov	r4, r2
 8005cee:	461d      	mov	r5, r3
 8005cf0:	f7fa fbf2 	bl	80004d8 <__aeabi_dmul>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005cfc:	f7fa fa34 	bl	8000168 <__aeabi_dsub>
 8005d00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d04:	4606      	mov	r6, r0
 8005d06:	460f      	mov	r7, r1
 8005d08:	4620      	mov	r0, r4
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	f7fa fa2c 	bl	8000168 <__aeabi_dsub>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4650      	mov	r0, sl
 8005d16:	4659      	mov	r1, fp
 8005d18:	f7fa fa26 	bl	8000168 <__aeabi_dsub>
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	464b      	mov	r3, r9
 8005d20:	f7fa fbda 	bl	80004d8 <__aeabi_dmul>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4630      	mov	r0, r6
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	f7fa fa1c 	bl	8000168 <__aeabi_dsub>
 8005d30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d34:	f7fa fbd0 	bl	80004d8 <__aeabi_dmul>
 8005d38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d3c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005d40:	4610      	mov	r0, r2
 8005d42:	4619      	mov	r1, r3
 8005d44:	f7fa fbc8 	bl	80004d8 <__aeabi_dmul>
 8005d48:	a379      	add	r3, pc, #484	; (adr r3, 8005f30 <__ieee754_pow+0x6e8>)
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	4604      	mov	r4, r0
 8005d50:	460d      	mov	r5, r1
 8005d52:	f7fa fbc1 	bl	80004d8 <__aeabi_dmul>
 8005d56:	a378      	add	r3, pc, #480	; (adr r3, 8005f38 <__ieee754_pow+0x6f0>)
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f7fa fa06 	bl	800016c <__adddf3>
 8005d60:	4622      	mov	r2, r4
 8005d62:	462b      	mov	r3, r5
 8005d64:	f7fa fbb8 	bl	80004d8 <__aeabi_dmul>
 8005d68:	a375      	add	r3, pc, #468	; (adr r3, 8005f40 <__ieee754_pow+0x6f8>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f7fa f9fd 	bl	800016c <__adddf3>
 8005d72:	4622      	mov	r2, r4
 8005d74:	462b      	mov	r3, r5
 8005d76:	f7fa fbaf 	bl	80004d8 <__aeabi_dmul>
 8005d7a:	a373      	add	r3, pc, #460	; (adr r3, 8005f48 <__ieee754_pow+0x700>)
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f7fa f9f4 	bl	800016c <__adddf3>
 8005d84:	4622      	mov	r2, r4
 8005d86:	462b      	mov	r3, r5
 8005d88:	f7fa fba6 	bl	80004d8 <__aeabi_dmul>
 8005d8c:	a370      	add	r3, pc, #448	; (adr r3, 8005f50 <__ieee754_pow+0x708>)
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f7fa f9eb 	bl	800016c <__adddf3>
 8005d96:	4622      	mov	r2, r4
 8005d98:	462b      	mov	r3, r5
 8005d9a:	f7fa fb9d 	bl	80004d8 <__aeabi_dmul>
 8005d9e:	a36e      	add	r3, pc, #440	; (adr r3, 8005f58 <__ieee754_pow+0x710>)
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f7fa f9e2 	bl	800016c <__adddf3>
 8005da8:	4622      	mov	r2, r4
 8005daa:	4606      	mov	r6, r0
 8005dac:	460f      	mov	r7, r1
 8005dae:	462b      	mov	r3, r5
 8005db0:	4620      	mov	r0, r4
 8005db2:	4629      	mov	r1, r5
 8005db4:	f7fa fb90 	bl	80004d8 <__aeabi_dmul>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	f7fa fb8a 	bl	80004d8 <__aeabi_dmul>
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	460d      	mov	r5, r1
 8005dc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dcc:	4642      	mov	r2, r8
 8005dce:	464b      	mov	r3, r9
 8005dd0:	f7fa f9cc 	bl	800016c <__adddf3>
 8005dd4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005dd8:	f7fa fb7e 	bl	80004d8 <__aeabi_dmul>
 8005ddc:	4622      	mov	r2, r4
 8005dde:	462b      	mov	r3, r5
 8005de0:	f7fa f9c4 	bl	800016c <__adddf3>
 8005de4:	4642      	mov	r2, r8
 8005de6:	4606      	mov	r6, r0
 8005de8:	460f      	mov	r7, r1
 8005dea:	464b      	mov	r3, r9
 8005dec:	4640      	mov	r0, r8
 8005dee:	4649      	mov	r1, r9
 8005df0:	f7fa fb72 	bl	80004d8 <__aeabi_dmul>
 8005df4:	2200      	movs	r2, #0
 8005df6:	4b66      	ldr	r3, [pc, #408]	; (8005f90 <__ieee754_pow+0x748>)
 8005df8:	4682      	mov	sl, r0
 8005dfa:	468b      	mov	fp, r1
 8005dfc:	f7fa f9b6 	bl	800016c <__adddf3>
 8005e00:	4632      	mov	r2, r6
 8005e02:	463b      	mov	r3, r7
 8005e04:	f7fa f9b2 	bl	800016c <__adddf3>
 8005e08:	2400      	movs	r4, #0
 8005e0a:	460d      	mov	r5, r1
 8005e0c:	4622      	mov	r2, r4
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4640      	mov	r0, r8
 8005e12:	4649      	mov	r1, r9
 8005e14:	f7fa fb60 	bl	80004d8 <__aeabi_dmul>
 8005e18:	2200      	movs	r2, #0
 8005e1a:	4680      	mov	r8, r0
 8005e1c:	4689      	mov	r9, r1
 8005e1e:	4620      	mov	r0, r4
 8005e20:	4629      	mov	r1, r5
 8005e22:	4b5b      	ldr	r3, [pc, #364]	; (8005f90 <__ieee754_pow+0x748>)
 8005e24:	f7fa f9a0 	bl	8000168 <__aeabi_dsub>
 8005e28:	4652      	mov	r2, sl
 8005e2a:	465b      	mov	r3, fp
 8005e2c:	f7fa f99c 	bl	8000168 <__aeabi_dsub>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4630      	mov	r0, r6
 8005e36:	4639      	mov	r1, r7
 8005e38:	f7fa f996 	bl	8000168 <__aeabi_dsub>
 8005e3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e40:	f7fa fb4a 	bl	80004d8 <__aeabi_dmul>
 8005e44:	4622      	mov	r2, r4
 8005e46:	4606      	mov	r6, r0
 8005e48:	460f      	mov	r7, r1
 8005e4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005e4e:	462b      	mov	r3, r5
 8005e50:	f7fa fb42 	bl	80004d8 <__aeabi_dmul>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4630      	mov	r0, r6
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	f7fa f986 	bl	800016c <__adddf3>
 8005e60:	2400      	movs	r4, #0
 8005e62:	4606      	mov	r6, r0
 8005e64:	460f      	mov	r7, r1
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	f7fa f97d 	bl	800016c <__adddf3>
 8005e72:	a33b      	add	r3, pc, #236	; (adr r3, 8005f60 <__ieee754_pow+0x718>)
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	4620      	mov	r0, r4
 8005e7a:	460d      	mov	r5, r1
 8005e7c:	f7fa fb2c 	bl	80004d8 <__aeabi_dmul>
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e88:	4620      	mov	r0, r4
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	f7fa f96c 	bl	8000168 <__aeabi_dsub>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4630      	mov	r0, r6
 8005e96:	4639      	mov	r1, r7
 8005e98:	f7fa f966 	bl	8000168 <__aeabi_dsub>
 8005e9c:	a332      	add	r3, pc, #200	; (adr r3, 8005f68 <__ieee754_pow+0x720>)
 8005e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea2:	f7fa fb19 	bl	80004d8 <__aeabi_dmul>
 8005ea6:	a332      	add	r3, pc, #200	; (adr r3, 8005f70 <__ieee754_pow+0x728>)
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	4606      	mov	r6, r0
 8005eae:	460f      	mov	r7, r1
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	f7fa fb10 	bl	80004d8 <__aeabi_dmul>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f7fa f954 	bl	800016c <__adddf3>
 8005ec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ec6:	4b33      	ldr	r3, [pc, #204]	; (8005f94 <__ieee754_pow+0x74c>)
 8005ec8:	f04f 0a00 	mov.w	sl, #0
 8005ecc:	4413      	add	r3, r2
 8005ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed2:	f7fa f94b 	bl	800016c <__adddf3>
 8005ed6:	4680      	mov	r8, r0
 8005ed8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005eda:	4689      	mov	r9, r1
 8005edc:	f7fa fa92 	bl	8000404 <__aeabi_i2d>
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ee6:	4b2c      	ldr	r3, [pc, #176]	; (8005f98 <__ieee754_pow+0x750>)
 8005ee8:	4413      	add	r3, r2
 8005eea:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005eee:	4642      	mov	r2, r8
 8005ef0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	f7fa f939 	bl	800016c <__adddf3>
 8005efa:	4632      	mov	r2, r6
 8005efc:	463b      	mov	r3, r7
 8005efe:	f7fa f935 	bl	800016c <__adddf3>
 8005f02:	4622      	mov	r2, r4
 8005f04:	462b      	mov	r3, r5
 8005f06:	f7fa f931 	bl	800016c <__adddf3>
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	462b      	mov	r3, r5
 8005f0e:	4650      	mov	r0, sl
 8005f10:	468b      	mov	fp, r1
 8005f12:	f7fa f929 	bl	8000168 <__aeabi_dsub>
 8005f16:	4632      	mov	r2, r6
 8005f18:	463b      	mov	r3, r7
 8005f1a:	f7fa f925 	bl	8000168 <__aeabi_dsub>
 8005f1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f22:	f7fa f921 	bl	8000168 <__aeabi_dsub>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	e60d      	b.n	8005b4c <__ieee754_pow+0x304>
 8005f30:	4a454eef 	.word	0x4a454eef
 8005f34:	3fca7e28 	.word	0x3fca7e28
 8005f38:	93c9db65 	.word	0x93c9db65
 8005f3c:	3fcd864a 	.word	0x3fcd864a
 8005f40:	a91d4101 	.word	0xa91d4101
 8005f44:	3fd17460 	.word	0x3fd17460
 8005f48:	518f264d 	.word	0x518f264d
 8005f4c:	3fd55555 	.word	0x3fd55555
 8005f50:	db6fabff 	.word	0xdb6fabff
 8005f54:	3fdb6db6 	.word	0x3fdb6db6
 8005f58:	33333303 	.word	0x33333303
 8005f5c:	3fe33333 	.word	0x3fe33333
 8005f60:	e0000000 	.word	0xe0000000
 8005f64:	3feec709 	.word	0x3feec709
 8005f68:	dc3a03fd 	.word	0xdc3a03fd
 8005f6c:	3feec709 	.word	0x3feec709
 8005f70:	145b01f5 	.word	0x145b01f5
 8005f74:	be3e2fe0 	.word	0xbe3e2fe0
 8005f78:	7ff00000 	.word	0x7ff00000
 8005f7c:	43400000 	.word	0x43400000
 8005f80:	0003988e 	.word	0x0003988e
 8005f84:	000bb679 	.word	0x000bb679
 8005f88:	08006e00 	.word	0x08006e00
 8005f8c:	3ff00000 	.word	0x3ff00000
 8005f90:	40080000 	.word	0x40080000
 8005f94:	08006e20 	.word	0x08006e20
 8005f98:	08006e10 	.word	0x08006e10
 8005f9c:	2601      	movs	r6, #1
 8005f9e:	e66a      	b.n	8005c76 <__ieee754_pow+0x42e>
 8005fa0:	a39d      	add	r3, pc, #628	; (adr r3, 8006218 <__ieee754_pow+0x9d0>)
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4649      	mov	r1, r9
 8005faa:	f7fa f8df 	bl	800016c <__adddf3>
 8005fae:	4622      	mov	r2, r4
 8005fb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fb4:	462b      	mov	r3, r5
 8005fb6:	4650      	mov	r0, sl
 8005fb8:	4639      	mov	r1, r7
 8005fba:	f7fa f8d5 	bl	8000168 <__aeabi_dsub>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fc6:	f7fa fd17 	bl	80009f8 <__aeabi_dcmpgt>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	f47f ae09 	bne.w	8005be2 <__ieee754_pow+0x39a>
 8005fd0:	4aa3      	ldr	r2, [pc, #652]	; (8006260 <__ieee754_pow+0xa18>)
 8005fd2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	f340 8101 	ble.w	80061de <__ieee754_pow+0x996>
 8005fdc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	151b      	asrs	r3, r3, #20
 8005fe4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005fe8:	fa4a f303 	asr.w	r3, sl, r3
 8005fec:	4433      	add	r3, r6
 8005fee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005ff2:	4f9c      	ldr	r7, [pc, #624]	; (8006264 <__ieee754_pow+0xa1c>)
 8005ff4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005ff8:	4117      	asrs	r7, r2
 8005ffa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005ffe:	ea23 0107 	bic.w	r1, r3, r7
 8006002:	f1c2 0214 	rsb	r2, r2, #20
 8006006:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800600a:	460b      	mov	r3, r1
 800600c:	fa4a fa02 	asr.w	sl, sl, r2
 8006010:	2e00      	cmp	r6, #0
 8006012:	4602      	mov	r2, r0
 8006014:	4629      	mov	r1, r5
 8006016:	4620      	mov	r0, r4
 8006018:	bfb8      	it	lt
 800601a:	f1ca 0a00 	rsblt	sl, sl, #0
 800601e:	f7fa f8a3 	bl	8000168 <__aeabi_dsub>
 8006022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800602a:	2400      	movs	r4, #0
 800602c:	4642      	mov	r2, r8
 800602e:	464b      	mov	r3, r9
 8006030:	f7fa f89c 	bl	800016c <__adddf3>
 8006034:	a37a      	add	r3, pc, #488	; (adr r3, 8006220 <__ieee754_pow+0x9d8>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	4620      	mov	r0, r4
 800603c:	460d      	mov	r5, r1
 800603e:	f7fa fa4b 	bl	80004d8 <__aeabi_dmul>
 8006042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006046:	4606      	mov	r6, r0
 8006048:	460f      	mov	r7, r1
 800604a:	4620      	mov	r0, r4
 800604c:	4629      	mov	r1, r5
 800604e:	f7fa f88b 	bl	8000168 <__aeabi_dsub>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4640      	mov	r0, r8
 8006058:	4649      	mov	r1, r9
 800605a:	f7fa f885 	bl	8000168 <__aeabi_dsub>
 800605e:	a372      	add	r3, pc, #456	; (adr r3, 8006228 <__ieee754_pow+0x9e0>)
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	f7fa fa38 	bl	80004d8 <__aeabi_dmul>
 8006068:	a371      	add	r3, pc, #452	; (adr r3, 8006230 <__ieee754_pow+0x9e8>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	4680      	mov	r8, r0
 8006070:	4689      	mov	r9, r1
 8006072:	4620      	mov	r0, r4
 8006074:	4629      	mov	r1, r5
 8006076:	f7fa fa2f 	bl	80004d8 <__aeabi_dmul>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4640      	mov	r0, r8
 8006080:	4649      	mov	r1, r9
 8006082:	f7fa f873 	bl	800016c <__adddf3>
 8006086:	4604      	mov	r4, r0
 8006088:	460d      	mov	r5, r1
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	4630      	mov	r0, r6
 8006090:	4639      	mov	r1, r7
 8006092:	f7fa f86b 	bl	800016c <__adddf3>
 8006096:	4632      	mov	r2, r6
 8006098:	463b      	mov	r3, r7
 800609a:	4680      	mov	r8, r0
 800609c:	4689      	mov	r9, r1
 800609e:	f7fa f863 	bl	8000168 <__aeabi_dsub>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4620      	mov	r0, r4
 80060a8:	4629      	mov	r1, r5
 80060aa:	f7fa f85d 	bl	8000168 <__aeabi_dsub>
 80060ae:	4642      	mov	r2, r8
 80060b0:	4606      	mov	r6, r0
 80060b2:	460f      	mov	r7, r1
 80060b4:	464b      	mov	r3, r9
 80060b6:	4640      	mov	r0, r8
 80060b8:	4649      	mov	r1, r9
 80060ba:	f7fa fa0d 	bl	80004d8 <__aeabi_dmul>
 80060be:	a35e      	add	r3, pc, #376	; (adr r3, 8006238 <__ieee754_pow+0x9f0>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	4604      	mov	r4, r0
 80060c6:	460d      	mov	r5, r1
 80060c8:	f7fa fa06 	bl	80004d8 <__aeabi_dmul>
 80060cc:	a35c      	add	r3, pc, #368	; (adr r3, 8006240 <__ieee754_pow+0x9f8>)
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	f7fa f849 	bl	8000168 <__aeabi_dsub>
 80060d6:	4622      	mov	r2, r4
 80060d8:	462b      	mov	r3, r5
 80060da:	f7fa f9fd 	bl	80004d8 <__aeabi_dmul>
 80060de:	a35a      	add	r3, pc, #360	; (adr r3, 8006248 <__ieee754_pow+0xa00>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	f7fa f842 	bl	800016c <__adddf3>
 80060e8:	4622      	mov	r2, r4
 80060ea:	462b      	mov	r3, r5
 80060ec:	f7fa f9f4 	bl	80004d8 <__aeabi_dmul>
 80060f0:	a357      	add	r3, pc, #348	; (adr r3, 8006250 <__ieee754_pow+0xa08>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa f837 	bl	8000168 <__aeabi_dsub>
 80060fa:	4622      	mov	r2, r4
 80060fc:	462b      	mov	r3, r5
 80060fe:	f7fa f9eb 	bl	80004d8 <__aeabi_dmul>
 8006102:	a355      	add	r3, pc, #340	; (adr r3, 8006258 <__ieee754_pow+0xa10>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f7fa f830 	bl	800016c <__adddf3>
 800610c:	4622      	mov	r2, r4
 800610e:	462b      	mov	r3, r5
 8006110:	f7fa f9e2 	bl	80004d8 <__aeabi_dmul>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4640      	mov	r0, r8
 800611a:	4649      	mov	r1, r9
 800611c:	f7fa f824 	bl	8000168 <__aeabi_dsub>
 8006120:	4604      	mov	r4, r0
 8006122:	460d      	mov	r5, r1
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4640      	mov	r0, r8
 800612a:	4649      	mov	r1, r9
 800612c:	f7fa f9d4 	bl	80004d8 <__aeabi_dmul>
 8006130:	2200      	movs	r2, #0
 8006132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800613a:	4620      	mov	r0, r4
 800613c:	4629      	mov	r1, r5
 800613e:	f7fa f813 	bl	8000168 <__aeabi_dsub>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800614a:	f7fa faef 	bl	800072c <__aeabi_ddiv>
 800614e:	4632      	mov	r2, r6
 8006150:	4604      	mov	r4, r0
 8006152:	460d      	mov	r5, r1
 8006154:	463b      	mov	r3, r7
 8006156:	4640      	mov	r0, r8
 8006158:	4649      	mov	r1, r9
 800615a:	f7fa f9bd 	bl	80004d8 <__aeabi_dmul>
 800615e:	4632      	mov	r2, r6
 8006160:	463b      	mov	r3, r7
 8006162:	f7fa f803 	bl	800016c <__adddf3>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4620      	mov	r0, r4
 800616c:	4629      	mov	r1, r5
 800616e:	f7f9 fffb 	bl	8000168 <__aeabi_dsub>
 8006172:	4642      	mov	r2, r8
 8006174:	464b      	mov	r3, r9
 8006176:	f7f9 fff7 	bl	8000168 <__aeabi_dsub>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	2000      	movs	r0, #0
 8006180:	4939      	ldr	r1, [pc, #228]	; (8006268 <__ieee754_pow+0xa20>)
 8006182:	f7f9 fff1 	bl	8000168 <__aeabi_dsub>
 8006186:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800618a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800618e:	da29      	bge.n	80061e4 <__ieee754_pow+0x99c>
 8006190:	4652      	mov	r2, sl
 8006192:	f000 fd2d 	bl	8006bf0 <scalbn>
 8006196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800619a:	f7ff bbfe 	b.w	800599a <__ieee754_pow+0x152>
 800619e:	4b33      	ldr	r3, [pc, #204]	; (800626c <__ieee754_pow+0xa24>)
 80061a0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80061a4:	429f      	cmp	r7, r3
 80061a6:	f77f af13 	ble.w	8005fd0 <__ieee754_pow+0x788>
 80061aa:	4b31      	ldr	r3, [pc, #196]	; (8006270 <__ieee754_pow+0xa28>)
 80061ac:	440b      	add	r3, r1
 80061ae:	4303      	orrs	r3, r0
 80061b0:	d009      	beq.n	80061c6 <__ieee754_pow+0x97e>
 80061b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061b6:	2200      	movs	r2, #0
 80061b8:	2300      	movs	r3, #0
 80061ba:	f7fa fbff 	bl	80009bc <__aeabi_dcmplt>
 80061be:	3800      	subs	r0, #0
 80061c0:	bf18      	it	ne
 80061c2:	2001      	movne	r0, #1
 80061c4:	e453      	b.n	8005a6e <__ieee754_pow+0x226>
 80061c6:	4622      	mov	r2, r4
 80061c8:	462b      	mov	r3, r5
 80061ca:	f7f9 ffcd 	bl	8000168 <__aeabi_dsub>
 80061ce:	4642      	mov	r2, r8
 80061d0:	464b      	mov	r3, r9
 80061d2:	f7fa fc07 	bl	80009e4 <__aeabi_dcmpge>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	f43f aefa 	beq.w	8005fd0 <__ieee754_pow+0x788>
 80061dc:	e7e9      	b.n	80061b2 <__ieee754_pow+0x96a>
 80061de:	f04f 0a00 	mov.w	sl, #0
 80061e2:	e720      	b.n	8006026 <__ieee754_pow+0x7de>
 80061e4:	4621      	mov	r1, r4
 80061e6:	e7d6      	b.n	8006196 <__ieee754_pow+0x94e>
 80061e8:	f04f 0b00 	mov.w	fp, #0
 80061ec:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006268 <__ieee754_pow+0xa20>
 80061f0:	f7ff bbba 	b.w	8005968 <__ieee754_pow+0x120>
 80061f4:	f04f 0b00 	mov.w	fp, #0
 80061f8:	f04f 0c00 	mov.w	ip, #0
 80061fc:	f7ff bbb4 	b.w	8005968 <__ieee754_pow+0x120>
 8006200:	4640      	mov	r0, r8
 8006202:	4649      	mov	r1, r9
 8006204:	f7ff bb3d 	b.w	8005882 <__ieee754_pow+0x3a>
 8006208:	9200      	str	r2, [sp, #0]
 800620a:	f7ff bb89 	b.w	8005920 <__ieee754_pow+0xd8>
 800620e:	2300      	movs	r3, #0
 8006210:	f7ff bb73 	b.w	80058fa <__ieee754_pow+0xb2>
 8006214:	f3af 8000 	nop.w
 8006218:	652b82fe 	.word	0x652b82fe
 800621c:	3c971547 	.word	0x3c971547
 8006220:	00000000 	.word	0x00000000
 8006224:	3fe62e43 	.word	0x3fe62e43
 8006228:	fefa39ef 	.word	0xfefa39ef
 800622c:	3fe62e42 	.word	0x3fe62e42
 8006230:	0ca86c39 	.word	0x0ca86c39
 8006234:	be205c61 	.word	0xbe205c61
 8006238:	72bea4d0 	.word	0x72bea4d0
 800623c:	3e663769 	.word	0x3e663769
 8006240:	c5d26bf1 	.word	0xc5d26bf1
 8006244:	3ebbbd41 	.word	0x3ebbbd41
 8006248:	af25de2c 	.word	0xaf25de2c
 800624c:	3f11566a 	.word	0x3f11566a
 8006250:	16bebd93 	.word	0x16bebd93
 8006254:	3f66c16c 	.word	0x3f66c16c
 8006258:	5555553e 	.word	0x5555553e
 800625c:	3fc55555 	.word	0x3fc55555
 8006260:	3fe00000 	.word	0x3fe00000
 8006264:	000fffff 	.word	0x000fffff
 8006268:	3ff00000 	.word	0x3ff00000
 800626c:	4090cbff 	.word	0x4090cbff
 8006270:	3f6f3400 	.word	0x3f6f3400

08006274 <__ieee754_sqrt>:
 8006274:	f8df c158 	ldr.w	ip, [pc, #344]	; 80063d0 <__ieee754_sqrt+0x15c>
 8006278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800627c:	ea3c 0c01 	bics.w	ip, ip, r1
 8006280:	4606      	mov	r6, r0
 8006282:	460d      	mov	r5, r1
 8006284:	460c      	mov	r4, r1
 8006286:	460a      	mov	r2, r1
 8006288:	4607      	mov	r7, r0
 800628a:	4603      	mov	r3, r0
 800628c:	d10f      	bne.n	80062ae <__ieee754_sqrt+0x3a>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	f7fa f921 	bl	80004d8 <__aeabi_dmul>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4630      	mov	r0, r6
 800629c:	4629      	mov	r1, r5
 800629e:	f7f9 ff65 	bl	800016c <__adddf3>
 80062a2:	4606      	mov	r6, r0
 80062a4:	460d      	mov	r5, r1
 80062a6:	4630      	mov	r0, r6
 80062a8:	4629      	mov	r1, r5
 80062aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ae:	2900      	cmp	r1, #0
 80062b0:	dc0e      	bgt.n	80062d0 <__ieee754_sqrt+0x5c>
 80062b2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80062b6:	ea5c 0707 	orrs.w	r7, ip, r7
 80062ba:	d0f4      	beq.n	80062a6 <__ieee754_sqrt+0x32>
 80062bc:	b141      	cbz	r1, 80062d0 <__ieee754_sqrt+0x5c>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	f7f9 ff51 	bl	8000168 <__aeabi_dsub>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	f7fa fa2f 	bl	800072c <__aeabi_ddiv>
 80062ce:	e7e8      	b.n	80062a2 <__ieee754_sqrt+0x2e>
 80062d0:	1521      	asrs	r1, r4, #20
 80062d2:	d075      	beq.n	80063c0 <__ieee754_sqrt+0x14c>
 80062d4:	07cc      	lsls	r4, r1, #31
 80062d6:	f04f 0400 	mov.w	r4, #0
 80062da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80062de:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80062e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80062e6:	bf5e      	ittt	pl
 80062e8:	0fd9      	lsrpl	r1, r3, #31
 80062ea:	005b      	lslpl	r3, r3, #1
 80062ec:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80062f0:	0fd9      	lsrs	r1, r3, #31
 80062f2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80062f6:	2516      	movs	r5, #22
 80062f8:	4620      	mov	r0, r4
 80062fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062fe:	107f      	asrs	r7, r7, #1
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	1846      	adds	r6, r0, r1
 8006304:	4296      	cmp	r6, r2
 8006306:	bfde      	ittt	le
 8006308:	1b92      	suble	r2, r2, r6
 800630a:	1870      	addle	r0, r6, r1
 800630c:	1864      	addle	r4, r4, r1
 800630e:	0052      	lsls	r2, r2, #1
 8006310:	3d01      	subs	r5, #1
 8006312:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006316:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800631a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800631e:	d1f0      	bne.n	8006302 <__ieee754_sqrt+0x8e>
 8006320:	4629      	mov	r1, r5
 8006322:	f04f 0e20 	mov.w	lr, #32
 8006326:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800632a:	4282      	cmp	r2, r0
 800632c:	eb06 0c05 	add.w	ip, r6, r5
 8006330:	dc02      	bgt.n	8006338 <__ieee754_sqrt+0xc4>
 8006332:	d113      	bne.n	800635c <__ieee754_sqrt+0xe8>
 8006334:	459c      	cmp	ip, r3
 8006336:	d811      	bhi.n	800635c <__ieee754_sqrt+0xe8>
 8006338:	f1bc 0f00 	cmp.w	ip, #0
 800633c:	eb0c 0506 	add.w	r5, ip, r6
 8006340:	da43      	bge.n	80063ca <__ieee754_sqrt+0x156>
 8006342:	2d00      	cmp	r5, #0
 8006344:	db41      	blt.n	80063ca <__ieee754_sqrt+0x156>
 8006346:	f100 0801 	add.w	r8, r0, #1
 800634a:	1a12      	subs	r2, r2, r0
 800634c:	4640      	mov	r0, r8
 800634e:	459c      	cmp	ip, r3
 8006350:	bf88      	it	hi
 8006352:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006356:	eba3 030c 	sub.w	r3, r3, ip
 800635a:	4431      	add	r1, r6
 800635c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006360:	f1be 0e01 	subs.w	lr, lr, #1
 8006364:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006368:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800636c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006370:	d1db      	bne.n	800632a <__ieee754_sqrt+0xb6>
 8006372:	4313      	orrs	r3, r2
 8006374:	d006      	beq.n	8006384 <__ieee754_sqrt+0x110>
 8006376:	1c48      	adds	r0, r1, #1
 8006378:	bf0b      	itete	eq
 800637a:	4671      	moveq	r1, lr
 800637c:	3101      	addne	r1, #1
 800637e:	3401      	addeq	r4, #1
 8006380:	f021 0101 	bicne.w	r1, r1, #1
 8006384:	1063      	asrs	r3, r4, #1
 8006386:	0849      	lsrs	r1, r1, #1
 8006388:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800638c:	07e2      	lsls	r2, r4, #31
 800638e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006392:	bf48      	it	mi
 8006394:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006398:	460e      	mov	r6, r1
 800639a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800639e:	e782      	b.n	80062a6 <__ieee754_sqrt+0x32>
 80063a0:	0ada      	lsrs	r2, r3, #11
 80063a2:	3815      	subs	r0, #21
 80063a4:	055b      	lsls	r3, r3, #21
 80063a6:	2a00      	cmp	r2, #0
 80063a8:	d0fa      	beq.n	80063a0 <__ieee754_sqrt+0x12c>
 80063aa:	02d5      	lsls	r5, r2, #11
 80063ac:	d50a      	bpl.n	80063c4 <__ieee754_sqrt+0x150>
 80063ae:	f1c1 0420 	rsb	r4, r1, #32
 80063b2:	fa23 f404 	lsr.w	r4, r3, r4
 80063b6:	1e4d      	subs	r5, r1, #1
 80063b8:	408b      	lsls	r3, r1
 80063ba:	4322      	orrs	r2, r4
 80063bc:	1b41      	subs	r1, r0, r5
 80063be:	e789      	b.n	80062d4 <__ieee754_sqrt+0x60>
 80063c0:	4608      	mov	r0, r1
 80063c2:	e7f0      	b.n	80063a6 <__ieee754_sqrt+0x132>
 80063c4:	0052      	lsls	r2, r2, #1
 80063c6:	3101      	adds	r1, #1
 80063c8:	e7ef      	b.n	80063aa <__ieee754_sqrt+0x136>
 80063ca:	4680      	mov	r8, r0
 80063cc:	e7bd      	b.n	800634a <__ieee754_sqrt+0xd6>
 80063ce:	bf00      	nop
 80063d0:	7ff00000 	.word	0x7ff00000

080063d4 <__ieee754_powf>:
 80063d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d8:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 80063dc:	4681      	mov	r9, r0
 80063de:	460f      	mov	r7, r1
 80063e0:	4680      	mov	r8, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	b087      	sub	sp, #28
 80063e6:	d10d      	bne.n	8006404 <__ieee754_powf+0x30>
 80063e8:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 80063ec:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80063f0:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 80063f4:	f240 8338 	bls.w	8006a68 <__ieee754_powf+0x694>
 80063f8:	4639      	mov	r1, r7
 80063fa:	4648      	mov	r0, r9
 80063fc:	f7fa fb9a 	bl	8000b34 <__addsf3>
 8006400:	4601      	mov	r1, r0
 8006402:	e040      	b.n	8006486 <__ieee754_powf+0xb2>
 8006404:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8006408:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800640c:	dcf4      	bgt.n	80063f8 <__ieee754_powf+0x24>
 800640e:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 8006412:	dd08      	ble.n	8006426 <__ieee754_powf+0x52>
 8006414:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 8006418:	d1ee      	bne.n	80063f8 <__ieee754_powf+0x24>
 800641a:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 800641e:	0064      	lsls	r4, r4, #1
 8006420:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8006424:	e7e6      	b.n	80063f4 <__ieee754_powf+0x20>
 8006426:	2800      	cmp	r0, #0
 8006428:	da20      	bge.n	800646c <__ieee754_powf+0x98>
 800642a:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 800642e:	da2e      	bge.n	800648e <__ieee754_powf+0xba>
 8006430:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8006434:	f2c0 831d 	blt.w	8006a72 <__ieee754_powf+0x69e>
 8006438:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800643c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006440:	fa4a f503 	asr.w	r5, sl, r3
 8006444:	fa05 f303 	lsl.w	r3, r5, r3
 8006448:	4553      	cmp	r3, sl
 800644a:	f040 8312 	bne.w	8006a72 <__ieee754_powf+0x69e>
 800644e:	f005 0501 	and.w	r5, r5, #1
 8006452:	f1c5 0502 	rsb	r5, r5, #2
 8006456:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 800645a:	d120      	bne.n	800649e <__ieee754_powf+0xca>
 800645c:	2c00      	cmp	r4, #0
 800645e:	4649      	mov	r1, r9
 8006460:	da11      	bge.n	8006486 <__ieee754_powf+0xb2>
 8006462:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006466:	f7fa fd21 	bl	8000eac <__aeabi_fdiv>
 800646a:	e7c9      	b.n	8006400 <__ieee754_powf+0x2c>
 800646c:	2500      	movs	r5, #0
 800646e:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 8006472:	d1f0      	bne.n	8006456 <__ieee754_powf+0x82>
 8006474:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006478:	f000 82f6 	beq.w	8006a68 <__ieee754_powf+0x694>
 800647c:	dd09      	ble.n	8006492 <__ieee754_powf+0xbe>
 800647e:	2c00      	cmp	r4, #0
 8006480:	f2c0 82f5 	blt.w	8006a6e <__ieee754_powf+0x69a>
 8006484:	4639      	mov	r1, r7
 8006486:	4608      	mov	r0, r1
 8006488:	b007      	add	sp, #28
 800648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648e:	2502      	movs	r5, #2
 8006490:	e7ed      	b.n	800646e <__ieee754_powf+0x9a>
 8006492:	2c00      	cmp	r4, #0
 8006494:	f280 82eb 	bge.w	8006a6e <__ieee754_powf+0x69a>
 8006498:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800649c:	e7f3      	b.n	8006486 <__ieee754_powf+0xb2>
 800649e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80064a2:	d104      	bne.n	80064ae <__ieee754_powf+0xda>
 80064a4:	4649      	mov	r1, r9
 80064a6:	4648      	mov	r0, r9
 80064a8:	f7fa fc4c 	bl	8000d44 <__aeabi_fmul>
 80064ac:	e7a8      	b.n	8006400 <__ieee754_powf+0x2c>
 80064ae:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80064b2:	4648      	mov	r0, r9
 80064b4:	d107      	bne.n	80064c6 <__ieee754_powf+0xf2>
 80064b6:	f1b8 0f00 	cmp.w	r8, #0
 80064ba:	db04      	blt.n	80064c6 <__ieee754_powf+0xf2>
 80064bc:	b007      	add	sp, #28
 80064be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c2:	f000 baef 	b.w	8006aa4 <__ieee754_sqrtf>
 80064c6:	f000 fc11 	bl	8006cec <fabsf>
 80064ca:	4601      	mov	r1, r0
 80064cc:	b126      	cbz	r6, 80064d8 <__ieee754_powf+0x104>
 80064ce:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80064d2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80064d6:	d118      	bne.n	800650a <__ieee754_powf+0x136>
 80064d8:	2c00      	cmp	r4, #0
 80064da:	da04      	bge.n	80064e6 <__ieee754_powf+0x112>
 80064dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80064e0:	f7fa fce4 	bl	8000eac <__aeabi_fdiv>
 80064e4:	4601      	mov	r1, r0
 80064e6:	f1b8 0f00 	cmp.w	r8, #0
 80064ea:	dacc      	bge.n	8006486 <__ieee754_powf+0xb2>
 80064ec:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 80064f0:	ea56 0305 	orrs.w	r3, r6, r5
 80064f4:	d104      	bne.n	8006500 <__ieee754_powf+0x12c>
 80064f6:	4608      	mov	r0, r1
 80064f8:	f7fa fb1a 	bl	8000b30 <__aeabi_fsub>
 80064fc:	4601      	mov	r1, r0
 80064fe:	e7b2      	b.n	8006466 <__ieee754_powf+0x92>
 8006500:	2d01      	cmp	r5, #1
 8006502:	d1c0      	bne.n	8006486 <__ieee754_powf+0xb2>
 8006504:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8006508:	e77a      	b.n	8006400 <__ieee754_powf+0x2c>
 800650a:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800650e:	3b01      	subs	r3, #1
 8006510:	9302      	str	r3, [sp, #8]
 8006512:	432b      	orrs	r3, r5
 8006514:	d101      	bne.n	800651a <__ieee754_powf+0x146>
 8006516:	4649      	mov	r1, r9
 8006518:	e7ed      	b.n	80064f6 <__ieee754_powf+0x122>
 800651a:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 800651e:	f340 809f 	ble.w	8006660 <__ieee754_powf+0x28c>
 8006522:	4b48      	ldr	r3, [pc, #288]	; (8006644 <__ieee754_powf+0x270>)
 8006524:	429e      	cmp	r6, r3
 8006526:	dc07      	bgt.n	8006538 <__ieee754_powf+0x164>
 8006528:	2c00      	cmp	r4, #0
 800652a:	da0a      	bge.n	8006542 <__ieee754_powf+0x16e>
 800652c:	2000      	movs	r0, #0
 800652e:	b007      	add	sp, #28
 8006530:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	f000 bb4c 	b.w	8006bd0 <__math_oflowf>
 8006538:	4b43      	ldr	r3, [pc, #268]	; (8006648 <__ieee754_powf+0x274>)
 800653a:	429e      	cmp	r6, r3
 800653c:	dd07      	ble.n	800654e <__ieee754_powf+0x17a>
 800653e:	2c00      	cmp	r4, #0
 8006540:	dcf4      	bgt.n	800652c <__ieee754_powf+0x158>
 8006542:	2000      	movs	r0, #0
 8006544:	b007      	add	sp, #28
 8006546:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654a:	f000 bb3d 	b.w	8006bc8 <__math_uflowf>
 800654e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006552:	f7fa faed 	bl	8000b30 <__aeabi_fsub>
 8006556:	493d      	ldr	r1, [pc, #244]	; (800664c <__ieee754_powf+0x278>)
 8006558:	4606      	mov	r6, r0
 800655a:	f7fa fbf3 	bl	8000d44 <__aeabi_fmul>
 800655e:	493c      	ldr	r1, [pc, #240]	; (8006650 <__ieee754_powf+0x27c>)
 8006560:	4680      	mov	r8, r0
 8006562:	4630      	mov	r0, r6
 8006564:	f7fa fbee 	bl	8000d44 <__aeabi_fmul>
 8006568:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800656c:	4681      	mov	r9, r0
 800656e:	4630      	mov	r0, r6
 8006570:	f7fa fbe8 	bl	8000d44 <__aeabi_fmul>
 8006574:	4601      	mov	r1, r0
 8006576:	4837      	ldr	r0, [pc, #220]	; (8006654 <__ieee754_powf+0x280>)
 8006578:	f7fa fada 	bl	8000b30 <__aeabi_fsub>
 800657c:	4631      	mov	r1, r6
 800657e:	f7fa fbe1 	bl	8000d44 <__aeabi_fmul>
 8006582:	4601      	mov	r1, r0
 8006584:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006588:	f7fa fad2 	bl	8000b30 <__aeabi_fsub>
 800658c:	4631      	mov	r1, r6
 800658e:	4682      	mov	sl, r0
 8006590:	4630      	mov	r0, r6
 8006592:	f7fa fbd7 	bl	8000d44 <__aeabi_fmul>
 8006596:	4601      	mov	r1, r0
 8006598:	4650      	mov	r0, sl
 800659a:	f7fa fbd3 	bl	8000d44 <__aeabi_fmul>
 800659e:	492e      	ldr	r1, [pc, #184]	; (8006658 <__ieee754_powf+0x284>)
 80065a0:	f7fa fbd0 	bl	8000d44 <__aeabi_fmul>
 80065a4:	4601      	mov	r1, r0
 80065a6:	4648      	mov	r0, r9
 80065a8:	f7fa fac2 	bl	8000b30 <__aeabi_fsub>
 80065ac:	4601      	mov	r1, r0
 80065ae:	4606      	mov	r6, r0
 80065b0:	4640      	mov	r0, r8
 80065b2:	f7fa fabf 	bl	8000b34 <__addsf3>
 80065b6:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 80065ba:	f029 090f 	bic.w	r9, r9, #15
 80065be:	4641      	mov	r1, r8
 80065c0:	4648      	mov	r0, r9
 80065c2:	f7fa fab5 	bl	8000b30 <__aeabi_fsub>
 80065c6:	4601      	mov	r1, r0
 80065c8:	4630      	mov	r0, r6
 80065ca:	f7fa fab1 	bl	8000b30 <__aeabi_fsub>
 80065ce:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80065d2:	9b02      	ldr	r3, [sp, #8]
 80065d4:	3d01      	subs	r5, #1
 80065d6:	f024 040f 	bic.w	r4, r4, #15
 80065da:	432b      	orrs	r3, r5
 80065dc:	4606      	mov	r6, r0
 80065de:	4621      	mov	r1, r4
 80065e0:	4638      	mov	r0, r7
 80065e2:	bf14      	ite	ne
 80065e4:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 80065e8:	4d1c      	ldreq	r5, [pc, #112]	; (800665c <__ieee754_powf+0x288>)
 80065ea:	f7fa faa1 	bl	8000b30 <__aeabi_fsub>
 80065ee:	4649      	mov	r1, r9
 80065f0:	f7fa fba8 	bl	8000d44 <__aeabi_fmul>
 80065f4:	4639      	mov	r1, r7
 80065f6:	4680      	mov	r8, r0
 80065f8:	4630      	mov	r0, r6
 80065fa:	f7fa fba3 	bl	8000d44 <__aeabi_fmul>
 80065fe:	4601      	mov	r1, r0
 8006600:	4640      	mov	r0, r8
 8006602:	f7fa fa97 	bl	8000b34 <__addsf3>
 8006606:	4621      	mov	r1, r4
 8006608:	4606      	mov	r6, r0
 800660a:	4648      	mov	r0, r9
 800660c:	f7fa fb9a 	bl	8000d44 <__aeabi_fmul>
 8006610:	4601      	mov	r1, r0
 8006612:	4607      	mov	r7, r0
 8006614:	4681      	mov	r9, r0
 8006616:	4630      	mov	r0, r6
 8006618:	f7fa fa8c 	bl	8000b34 <__addsf3>
 800661c:	2800      	cmp	r0, #0
 800661e:	4682      	mov	sl, r0
 8006620:	4680      	mov	r8, r0
 8006622:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8006626:	f340 8201 	ble.w	8006a2c <__ieee754_powf+0x658>
 800662a:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 800662e:	f340 814f 	ble.w	80068d0 <__ieee754_powf+0x4fc>
 8006632:	2100      	movs	r1, #0
 8006634:	4628      	mov	r0, r5
 8006636:	f7fa fd23 	bl	8001080 <__aeabi_fcmplt>
 800663a:	3800      	subs	r0, #0
 800663c:	bf18      	it	ne
 800663e:	2001      	movne	r0, #1
 8006640:	e775      	b.n	800652e <__ieee754_powf+0x15a>
 8006642:	bf00      	nop
 8006644:	3f7ffff3 	.word	0x3f7ffff3
 8006648:	3f800007 	.word	0x3f800007
 800664c:	3fb8aa00 	.word	0x3fb8aa00
 8006650:	36eca570 	.word	0x36eca570
 8006654:	3eaaaaab 	.word	0x3eaaaaab
 8006658:	3fb8aa3b 	.word	0x3fb8aa3b
 800665c:	bf800000 	.word	0xbf800000
 8006660:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8006664:	f040 8111 	bne.w	800688a <__ieee754_powf+0x4b6>
 8006668:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 800666c:	f7fa fb6a 	bl	8000d44 <__aeabi_fmul>
 8006670:	f06f 0217 	mvn.w	r2, #23
 8006674:	4606      	mov	r6, r0
 8006676:	15f3      	asrs	r3, r6, #23
 8006678:	3b7f      	subs	r3, #127	; 0x7f
 800667a:	4413      	add	r3, r2
 800667c:	9301      	str	r3, [sp, #4]
 800667e:	4b85      	ldr	r3, [pc, #532]	; (8006894 <__ieee754_powf+0x4c0>)
 8006680:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8006684:	4298      	cmp	r0, r3
 8006686:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 800668a:	dd08      	ble.n	800669e <__ieee754_powf+0x2ca>
 800668c:	4b82      	ldr	r3, [pc, #520]	; (8006898 <__ieee754_powf+0x4c4>)
 800668e:	4298      	cmp	r0, r3
 8006690:	f340 80fd 	ble.w	800688e <__ieee754_powf+0x4ba>
 8006694:	9b01      	ldr	r3, [sp, #4]
 8006696:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 800669a:	3301      	adds	r3, #1
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	2300      	movs	r3, #0
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	9900      	ldr	r1, [sp, #0]
 80066a4:	4a7d      	ldr	r2, [pc, #500]	; (800689c <__ieee754_powf+0x4c8>)
 80066a6:	4630      	mov	r0, r6
 80066a8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80066ac:	9603      	str	r6, [sp, #12]
 80066ae:	4611      	mov	r1, r2
 80066b0:	9205      	str	r2, [sp, #20]
 80066b2:	f7fa fa3d 	bl	8000b30 <__aeabi_fsub>
 80066b6:	9a05      	ldr	r2, [sp, #20]
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	4683      	mov	fp, r0
 80066bc:	4619      	mov	r1, r3
 80066be:	4610      	mov	r0, r2
 80066c0:	9203      	str	r2, [sp, #12]
 80066c2:	9304      	str	r3, [sp, #16]
 80066c4:	f7fa fa36 	bl	8000b34 <__addsf3>
 80066c8:	4601      	mov	r1, r0
 80066ca:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80066ce:	f7fa fbed 	bl	8000eac <__aeabi_fdiv>
 80066d2:	4682      	mov	sl, r0
 80066d4:	4601      	mov	r1, r0
 80066d6:	4658      	mov	r0, fp
 80066d8:	f7fa fb34 	bl	8000d44 <__aeabi_fmul>
 80066dc:	1076      	asrs	r6, r6, #1
 80066de:	9b00      	ldr	r3, [sp, #0]
 80066e0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80066e4:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 80066e8:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 80066ec:	f029 090f 	bic.w	r9, r9, #15
 80066f0:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80066f4:	4680      	mov	r8, r0
 80066f6:	4631      	mov	r1, r6
 80066f8:	4648      	mov	r0, r9
 80066fa:	f7fa fb23 	bl	8000d44 <__aeabi_fmul>
 80066fe:	4601      	mov	r1, r0
 8006700:	4658      	mov	r0, fp
 8006702:	f7fa fa15 	bl	8000b30 <__aeabi_fsub>
 8006706:	9a03      	ldr	r2, [sp, #12]
 8006708:	4683      	mov	fp, r0
 800670a:	4611      	mov	r1, r2
 800670c:	4630      	mov	r0, r6
 800670e:	f7fa fa0f 	bl	8000b30 <__aeabi_fsub>
 8006712:	9b04      	ldr	r3, [sp, #16]
 8006714:	4601      	mov	r1, r0
 8006716:	4618      	mov	r0, r3
 8006718:	f7fa fa0a 	bl	8000b30 <__aeabi_fsub>
 800671c:	4649      	mov	r1, r9
 800671e:	f7fa fb11 	bl	8000d44 <__aeabi_fmul>
 8006722:	4601      	mov	r1, r0
 8006724:	4658      	mov	r0, fp
 8006726:	f7fa fa03 	bl	8000b30 <__aeabi_fsub>
 800672a:	4651      	mov	r1, sl
 800672c:	f7fa fb0a 	bl	8000d44 <__aeabi_fmul>
 8006730:	4641      	mov	r1, r8
 8006732:	4682      	mov	sl, r0
 8006734:	4640      	mov	r0, r8
 8006736:	f7fa fb05 	bl	8000d44 <__aeabi_fmul>
 800673a:	4606      	mov	r6, r0
 800673c:	4958      	ldr	r1, [pc, #352]	; (80068a0 <__ieee754_powf+0x4cc>)
 800673e:	f7fa fb01 	bl	8000d44 <__aeabi_fmul>
 8006742:	4958      	ldr	r1, [pc, #352]	; (80068a4 <__ieee754_powf+0x4d0>)
 8006744:	f7fa f9f6 	bl	8000b34 <__addsf3>
 8006748:	4631      	mov	r1, r6
 800674a:	f7fa fafb 	bl	8000d44 <__aeabi_fmul>
 800674e:	4956      	ldr	r1, [pc, #344]	; (80068a8 <__ieee754_powf+0x4d4>)
 8006750:	f7fa f9f0 	bl	8000b34 <__addsf3>
 8006754:	4631      	mov	r1, r6
 8006756:	f7fa faf5 	bl	8000d44 <__aeabi_fmul>
 800675a:	4954      	ldr	r1, [pc, #336]	; (80068ac <__ieee754_powf+0x4d8>)
 800675c:	f7fa f9ea 	bl	8000b34 <__addsf3>
 8006760:	4631      	mov	r1, r6
 8006762:	f7fa faef 	bl	8000d44 <__aeabi_fmul>
 8006766:	4952      	ldr	r1, [pc, #328]	; (80068b0 <__ieee754_powf+0x4dc>)
 8006768:	f7fa f9e4 	bl	8000b34 <__addsf3>
 800676c:	4631      	mov	r1, r6
 800676e:	f7fa fae9 	bl	8000d44 <__aeabi_fmul>
 8006772:	4950      	ldr	r1, [pc, #320]	; (80068b4 <__ieee754_powf+0x4e0>)
 8006774:	f7fa f9de 	bl	8000b34 <__addsf3>
 8006778:	4631      	mov	r1, r6
 800677a:	4683      	mov	fp, r0
 800677c:	4630      	mov	r0, r6
 800677e:	f7fa fae1 	bl	8000d44 <__aeabi_fmul>
 8006782:	4601      	mov	r1, r0
 8006784:	4658      	mov	r0, fp
 8006786:	f7fa fadd 	bl	8000d44 <__aeabi_fmul>
 800678a:	4606      	mov	r6, r0
 800678c:	4649      	mov	r1, r9
 800678e:	4640      	mov	r0, r8
 8006790:	f7fa f9d0 	bl	8000b34 <__addsf3>
 8006794:	4651      	mov	r1, sl
 8006796:	f7fa fad5 	bl	8000d44 <__aeabi_fmul>
 800679a:	4631      	mov	r1, r6
 800679c:	f7fa f9ca 	bl	8000b34 <__addsf3>
 80067a0:	4649      	mov	r1, r9
 80067a2:	4683      	mov	fp, r0
 80067a4:	4648      	mov	r0, r9
 80067a6:	f7fa facd 	bl	8000d44 <__aeabi_fmul>
 80067aa:	4943      	ldr	r1, [pc, #268]	; (80068b8 <__ieee754_powf+0x4e4>)
 80067ac:	9003      	str	r0, [sp, #12]
 80067ae:	f7fa f9c1 	bl	8000b34 <__addsf3>
 80067b2:	4659      	mov	r1, fp
 80067b4:	f7fa f9be 	bl	8000b34 <__addsf3>
 80067b8:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80067bc:	f026 060f 	bic.w	r6, r6, #15
 80067c0:	4631      	mov	r1, r6
 80067c2:	4648      	mov	r0, r9
 80067c4:	f7fa fabe 	bl	8000d44 <__aeabi_fmul>
 80067c8:	493b      	ldr	r1, [pc, #236]	; (80068b8 <__ieee754_powf+0x4e4>)
 80067ca:	4681      	mov	r9, r0
 80067cc:	4630      	mov	r0, r6
 80067ce:	f7fa f9af 	bl	8000b30 <__aeabi_fsub>
 80067d2:	9b03      	ldr	r3, [sp, #12]
 80067d4:	4619      	mov	r1, r3
 80067d6:	f7fa f9ab 	bl	8000b30 <__aeabi_fsub>
 80067da:	4601      	mov	r1, r0
 80067dc:	4658      	mov	r0, fp
 80067de:	f7fa f9a7 	bl	8000b30 <__aeabi_fsub>
 80067e2:	4641      	mov	r1, r8
 80067e4:	f7fa faae 	bl	8000d44 <__aeabi_fmul>
 80067e8:	4631      	mov	r1, r6
 80067ea:	4680      	mov	r8, r0
 80067ec:	4650      	mov	r0, sl
 80067ee:	f7fa faa9 	bl	8000d44 <__aeabi_fmul>
 80067f2:	4601      	mov	r1, r0
 80067f4:	4640      	mov	r0, r8
 80067f6:	f7fa f99d 	bl	8000b34 <__addsf3>
 80067fa:	4682      	mov	sl, r0
 80067fc:	4601      	mov	r1, r0
 80067fe:	4648      	mov	r0, r9
 8006800:	f7fa f998 	bl	8000b34 <__addsf3>
 8006804:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8006808:	f026 060f 	bic.w	r6, r6, #15
 800680c:	4630      	mov	r0, r6
 800680e:	492b      	ldr	r1, [pc, #172]	; (80068bc <__ieee754_powf+0x4e8>)
 8006810:	f7fa fa98 	bl	8000d44 <__aeabi_fmul>
 8006814:	4649      	mov	r1, r9
 8006816:	4680      	mov	r8, r0
 8006818:	4630      	mov	r0, r6
 800681a:	f7fa f989 	bl	8000b30 <__aeabi_fsub>
 800681e:	4601      	mov	r1, r0
 8006820:	4650      	mov	r0, sl
 8006822:	f7fa f985 	bl	8000b30 <__aeabi_fsub>
 8006826:	4926      	ldr	r1, [pc, #152]	; (80068c0 <__ieee754_powf+0x4ec>)
 8006828:	f7fa fa8c 	bl	8000d44 <__aeabi_fmul>
 800682c:	4925      	ldr	r1, [pc, #148]	; (80068c4 <__ieee754_powf+0x4f0>)
 800682e:	4681      	mov	r9, r0
 8006830:	4630      	mov	r0, r6
 8006832:	f7fa fa87 	bl	8000d44 <__aeabi_fmul>
 8006836:	4601      	mov	r1, r0
 8006838:	4648      	mov	r0, r9
 800683a:	f7fa f97b 	bl	8000b34 <__addsf3>
 800683e:	4b22      	ldr	r3, [pc, #136]	; (80068c8 <__ieee754_powf+0x4f4>)
 8006840:	9a00      	ldr	r2, [sp, #0]
 8006842:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006846:	f7fa f975 	bl	8000b34 <__addsf3>
 800684a:	4606      	mov	r6, r0
 800684c:	9801      	ldr	r0, [sp, #4]
 800684e:	f7fa fa25 	bl	8000c9c <__aeabi_i2f>
 8006852:	4682      	mov	sl, r0
 8006854:	4b1d      	ldr	r3, [pc, #116]	; (80068cc <__ieee754_powf+0x4f8>)
 8006856:	9a00      	ldr	r2, [sp, #0]
 8006858:	4631      	mov	r1, r6
 800685a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800685e:	4640      	mov	r0, r8
 8006860:	f7fa f968 	bl	8000b34 <__addsf3>
 8006864:	4659      	mov	r1, fp
 8006866:	f7fa f965 	bl	8000b34 <__addsf3>
 800686a:	4651      	mov	r1, sl
 800686c:	f7fa f962 	bl	8000b34 <__addsf3>
 8006870:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8006874:	f029 090f 	bic.w	r9, r9, #15
 8006878:	4651      	mov	r1, sl
 800687a:	4648      	mov	r0, r9
 800687c:	f7fa f958 	bl	8000b30 <__aeabi_fsub>
 8006880:	4659      	mov	r1, fp
 8006882:	f7fa f955 	bl	8000b30 <__aeabi_fsub>
 8006886:	4641      	mov	r1, r8
 8006888:	e69b      	b.n	80065c2 <__ieee754_powf+0x1ee>
 800688a:	2200      	movs	r2, #0
 800688c:	e6f3      	b.n	8006676 <__ieee754_powf+0x2a2>
 800688e:	2301      	movs	r3, #1
 8006890:	e706      	b.n	80066a0 <__ieee754_powf+0x2cc>
 8006892:	bf00      	nop
 8006894:	001cc471 	.word	0x001cc471
 8006898:	005db3d6 	.word	0x005db3d6
 800689c:	08006e30 	.word	0x08006e30
 80068a0:	3e53f142 	.word	0x3e53f142
 80068a4:	3e6c3255 	.word	0x3e6c3255
 80068a8:	3e8ba305 	.word	0x3e8ba305
 80068ac:	3eaaaaab 	.word	0x3eaaaaab
 80068b0:	3edb6db7 	.word	0x3edb6db7
 80068b4:	3f19999a 	.word	0x3f19999a
 80068b8:	40400000 	.word	0x40400000
 80068bc:	3f763800 	.word	0x3f763800
 80068c0:	3f76384f 	.word	0x3f76384f
 80068c4:	369dc3a0 	.word	0x369dc3a0
 80068c8:	08006e40 	.word	0x08006e40
 80068cc:	08006e38 	.word	0x08006e38
 80068d0:	f040 80c2 	bne.w	8006a58 <__ieee754_powf+0x684>
 80068d4:	4968      	ldr	r1, [pc, #416]	; (8006a78 <__ieee754_powf+0x6a4>)
 80068d6:	4630      	mov	r0, r6
 80068d8:	f7fa f92c 	bl	8000b34 <__addsf3>
 80068dc:	4639      	mov	r1, r7
 80068de:	4681      	mov	r9, r0
 80068e0:	4650      	mov	r0, sl
 80068e2:	f7fa f925 	bl	8000b30 <__aeabi_fsub>
 80068e6:	4601      	mov	r1, r0
 80068e8:	4648      	mov	r0, r9
 80068ea:	f7fa fbe7 	bl	80010bc <__aeabi_fcmpgt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f47f ae9f 	bne.w	8006632 <__ieee754_powf+0x25e>
 80068f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80068f8:	15e4      	asrs	r4, r4, #23
 80068fa:	3c7e      	subs	r4, #126	; 0x7e
 80068fc:	4123      	asrs	r3, r4
 80068fe:	4443      	add	r3, r8
 8006900:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006904:	495d      	ldr	r1, [pc, #372]	; (8006a7c <__ieee754_powf+0x6a8>)
 8006906:	3a7f      	subs	r2, #127	; 0x7f
 8006908:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800690c:	4111      	asrs	r1, r2
 800690e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8006912:	f1c2 0217 	rsb	r2, r2, #23
 8006916:	4114      	asrs	r4, r2
 8006918:	f1b8 0f00 	cmp.w	r8, #0
 800691c:	4638      	mov	r0, r7
 800691e:	ea23 0101 	bic.w	r1, r3, r1
 8006922:	bfb8      	it	lt
 8006924:	4264      	neglt	r4, r4
 8006926:	f7fa f903 	bl	8000b30 <__aeabi_fsub>
 800692a:	4681      	mov	r9, r0
 800692c:	4631      	mov	r1, r6
 800692e:	4648      	mov	r0, r9
 8006930:	f7fa f900 	bl	8000b34 <__addsf3>
 8006934:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8006938:	f027 070f 	bic.w	r7, r7, #15
 800693c:	4638      	mov	r0, r7
 800693e:	4950      	ldr	r1, [pc, #320]	; (8006a80 <__ieee754_powf+0x6ac>)
 8006940:	f7fa fa00 	bl	8000d44 <__aeabi_fmul>
 8006944:	4649      	mov	r1, r9
 8006946:	4680      	mov	r8, r0
 8006948:	4638      	mov	r0, r7
 800694a:	f7fa f8f1 	bl	8000b30 <__aeabi_fsub>
 800694e:	4601      	mov	r1, r0
 8006950:	4630      	mov	r0, r6
 8006952:	f7fa f8ed 	bl	8000b30 <__aeabi_fsub>
 8006956:	494b      	ldr	r1, [pc, #300]	; (8006a84 <__ieee754_powf+0x6b0>)
 8006958:	f7fa f9f4 	bl	8000d44 <__aeabi_fmul>
 800695c:	494a      	ldr	r1, [pc, #296]	; (8006a88 <__ieee754_powf+0x6b4>)
 800695e:	4606      	mov	r6, r0
 8006960:	4638      	mov	r0, r7
 8006962:	f7fa f9ef 	bl	8000d44 <__aeabi_fmul>
 8006966:	4601      	mov	r1, r0
 8006968:	4630      	mov	r0, r6
 800696a:	f7fa f8e3 	bl	8000b34 <__addsf3>
 800696e:	4607      	mov	r7, r0
 8006970:	4601      	mov	r1, r0
 8006972:	4640      	mov	r0, r8
 8006974:	f7fa f8de 	bl	8000b34 <__addsf3>
 8006978:	4641      	mov	r1, r8
 800697a:	4606      	mov	r6, r0
 800697c:	f7fa f8d8 	bl	8000b30 <__aeabi_fsub>
 8006980:	4601      	mov	r1, r0
 8006982:	4638      	mov	r0, r7
 8006984:	f7fa f8d4 	bl	8000b30 <__aeabi_fsub>
 8006988:	4631      	mov	r1, r6
 800698a:	4680      	mov	r8, r0
 800698c:	4630      	mov	r0, r6
 800698e:	f7fa f9d9 	bl	8000d44 <__aeabi_fmul>
 8006992:	4607      	mov	r7, r0
 8006994:	493d      	ldr	r1, [pc, #244]	; (8006a8c <__ieee754_powf+0x6b8>)
 8006996:	f7fa f9d5 	bl	8000d44 <__aeabi_fmul>
 800699a:	493d      	ldr	r1, [pc, #244]	; (8006a90 <__ieee754_powf+0x6bc>)
 800699c:	f7fa f8c8 	bl	8000b30 <__aeabi_fsub>
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7fa f9cf 	bl	8000d44 <__aeabi_fmul>
 80069a6:	493b      	ldr	r1, [pc, #236]	; (8006a94 <__ieee754_powf+0x6c0>)
 80069a8:	f7fa f8c4 	bl	8000b34 <__addsf3>
 80069ac:	4639      	mov	r1, r7
 80069ae:	f7fa f9c9 	bl	8000d44 <__aeabi_fmul>
 80069b2:	4939      	ldr	r1, [pc, #228]	; (8006a98 <__ieee754_powf+0x6c4>)
 80069b4:	f7fa f8bc 	bl	8000b30 <__aeabi_fsub>
 80069b8:	4639      	mov	r1, r7
 80069ba:	f7fa f9c3 	bl	8000d44 <__aeabi_fmul>
 80069be:	4937      	ldr	r1, [pc, #220]	; (8006a9c <__ieee754_powf+0x6c8>)
 80069c0:	f7fa f8b8 	bl	8000b34 <__addsf3>
 80069c4:	4639      	mov	r1, r7
 80069c6:	f7fa f9bd 	bl	8000d44 <__aeabi_fmul>
 80069ca:	4601      	mov	r1, r0
 80069cc:	4630      	mov	r0, r6
 80069ce:	f7fa f8af 	bl	8000b30 <__aeabi_fsub>
 80069d2:	4607      	mov	r7, r0
 80069d4:	4601      	mov	r1, r0
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7fa f9b4 	bl	8000d44 <__aeabi_fmul>
 80069dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80069e0:	4681      	mov	r9, r0
 80069e2:	4638      	mov	r0, r7
 80069e4:	f7fa f8a4 	bl	8000b30 <__aeabi_fsub>
 80069e8:	4601      	mov	r1, r0
 80069ea:	4648      	mov	r0, r9
 80069ec:	f7fa fa5e 	bl	8000eac <__aeabi_fdiv>
 80069f0:	4641      	mov	r1, r8
 80069f2:	4607      	mov	r7, r0
 80069f4:	4630      	mov	r0, r6
 80069f6:	f7fa f9a5 	bl	8000d44 <__aeabi_fmul>
 80069fa:	4641      	mov	r1, r8
 80069fc:	f7fa f89a 	bl	8000b34 <__addsf3>
 8006a00:	4601      	mov	r1, r0
 8006a02:	4638      	mov	r0, r7
 8006a04:	f7fa f894 	bl	8000b30 <__aeabi_fsub>
 8006a08:	4631      	mov	r1, r6
 8006a0a:	f7fa f891 	bl	8000b30 <__aeabi_fsub>
 8006a0e:	4601      	mov	r1, r0
 8006a10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a14:	f7fa f88c 	bl	8000b30 <__aeabi_fsub>
 8006a18:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8006a1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a20:	da20      	bge.n	8006a64 <__ieee754_powf+0x690>
 8006a22:	4621      	mov	r1, r4
 8006a24:	f000 f96e 	bl	8006d04 <scalbnf>
 8006a28:	4629      	mov	r1, r5
 8006a2a:	e53d      	b.n	80064a8 <__ieee754_powf+0xd4>
 8006a2c:	4b1c      	ldr	r3, [pc, #112]	; (8006aa0 <__ieee754_powf+0x6cc>)
 8006a2e:	429c      	cmp	r4, r3
 8006a30:	dd07      	ble.n	8006a42 <__ieee754_powf+0x66e>
 8006a32:	2100      	movs	r1, #0
 8006a34:	4628      	mov	r0, r5
 8006a36:	f7fa fb23 	bl	8001080 <__aeabi_fcmplt>
 8006a3a:	3800      	subs	r0, #0
 8006a3c:	bf18      	it	ne
 8006a3e:	2001      	movne	r0, #1
 8006a40:	e580      	b.n	8006544 <__ieee754_powf+0x170>
 8006a42:	d109      	bne.n	8006a58 <__ieee754_powf+0x684>
 8006a44:	4639      	mov	r1, r7
 8006a46:	f7fa f873 	bl	8000b30 <__aeabi_fsub>
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	f7fa fb2c 	bl	80010a8 <__aeabi_fcmpge>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	f43f af4f 	beq.w	80068f4 <__ieee754_powf+0x520>
 8006a56:	e7ec      	b.n	8006a32 <__ieee754_powf+0x65e>
 8006a58:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006a5c:	f73f af4a 	bgt.w	80068f4 <__ieee754_powf+0x520>
 8006a60:	2400      	movs	r4, #0
 8006a62:	e763      	b.n	800692c <__ieee754_powf+0x558>
 8006a64:	4618      	mov	r0, r3
 8006a66:	e7df      	b.n	8006a28 <__ieee754_powf+0x654>
 8006a68:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006a6c:	e50b      	b.n	8006486 <__ieee754_powf+0xb2>
 8006a6e:	2100      	movs	r1, #0
 8006a70:	e509      	b.n	8006486 <__ieee754_powf+0xb2>
 8006a72:	2500      	movs	r5, #0
 8006a74:	e4ef      	b.n	8006456 <__ieee754_powf+0x82>
 8006a76:	bf00      	nop
 8006a78:	3338aa3c 	.word	0x3338aa3c
 8006a7c:	007fffff 	.word	0x007fffff
 8006a80:	3f317200 	.word	0x3f317200
 8006a84:	3f317218 	.word	0x3f317218
 8006a88:	35bfbe8c 	.word	0x35bfbe8c
 8006a8c:	3331bb4c 	.word	0x3331bb4c
 8006a90:	35ddea0e 	.word	0x35ddea0e
 8006a94:	388ab355 	.word	0x388ab355
 8006a98:	3b360b61 	.word	0x3b360b61
 8006a9c:	3e2aaaab 	.word	0x3e2aaaab
 8006aa0:	43160000 	.word	0x43160000

08006aa4 <__ieee754_sqrtf>:
 8006aa4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006aa8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4603      	mov	r3, r0
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	d309      	bcc.n	8006ac8 <__ieee754_sqrtf+0x24>
 8006ab4:	4601      	mov	r1, r0
 8006ab6:	f7fa f945 	bl	8000d44 <__aeabi_fmul>
 8006aba:	4601      	mov	r1, r0
 8006abc:	4620      	mov	r0, r4
 8006abe:	f7fa f839 	bl	8000b34 <__addsf3>
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	2a00      	cmp	r2, #0
 8006aca:	d0fb      	beq.n	8006ac4 <__ieee754_sqrtf+0x20>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	da06      	bge.n	8006ade <__ieee754_sqrtf+0x3a>
 8006ad0:	4601      	mov	r1, r0
 8006ad2:	f7fa f82d 	bl	8000b30 <__aeabi_fsub>
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	f7fa f9e8 	bl	8000eac <__aeabi_fdiv>
 8006adc:	e7f1      	b.n	8006ac2 <__ieee754_sqrtf+0x1e>
 8006ade:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8006ae2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8006ae6:	d029      	beq.n	8006b3c <__ieee754_sqrtf+0x98>
 8006ae8:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8006aec:	07cb      	lsls	r3, r1, #31
 8006aee:	f04f 0300 	mov.w	r3, #0
 8006af2:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8006af6:	f04f 0419 	mov.w	r4, #25
 8006afa:	461e      	mov	r6, r3
 8006afc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8006b00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006b04:	bf58      	it	pl
 8006b06:	0052      	lslpl	r2, r2, #1
 8006b08:	1040      	asrs	r0, r0, #1
 8006b0a:	0052      	lsls	r2, r2, #1
 8006b0c:	1875      	adds	r5, r6, r1
 8006b0e:	4295      	cmp	r5, r2
 8006b10:	bfde      	ittt	le
 8006b12:	186e      	addle	r6, r5, r1
 8006b14:	1b52      	suble	r2, r2, r5
 8006b16:	185b      	addle	r3, r3, r1
 8006b18:	3c01      	subs	r4, #1
 8006b1a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006b1e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006b22:	d1f3      	bne.n	8006b0c <__ieee754_sqrtf+0x68>
 8006b24:	b112      	cbz	r2, 8006b2c <__ieee754_sqrtf+0x88>
 8006b26:	3301      	adds	r3, #1
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	105c      	asrs	r4, r3, #1
 8006b2e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8006b32:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8006b36:	e7c5      	b.n	8006ac4 <__ieee754_sqrtf+0x20>
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	3201      	adds	r2, #1
 8006b3c:	0218      	lsls	r0, r3, #8
 8006b3e:	d5fb      	bpl.n	8006b38 <__ieee754_sqrtf+0x94>
 8006b40:	3a01      	subs	r2, #1
 8006b42:	1a89      	subs	r1, r1, r2
 8006b44:	e7d0      	b.n	8006ae8 <__ieee754_sqrtf+0x44>

08006b46 <with_errno>:
 8006b46:	b570      	push	{r4, r5, r6, lr}
 8006b48:	4604      	mov	r4, r0
 8006b4a:	460d      	mov	r5, r1
 8006b4c:	4616      	mov	r6, r2
 8006b4e:	f7fe fd89 	bl	8005664 <__errno>
 8006b52:	4629      	mov	r1, r5
 8006b54:	6006      	str	r6, [r0, #0]
 8006b56:	4620      	mov	r0, r4
 8006b58:	bd70      	pop	{r4, r5, r6, pc}

08006b5a <xflow>:
 8006b5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b5c:	4615      	mov	r5, r2
 8006b5e:	461c      	mov	r4, r3
 8006b60:	b180      	cbz	r0, 8006b84 <xflow+0x2a>
 8006b62:	4610      	mov	r0, r2
 8006b64:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b68:	e9cd 0100 	strd	r0, r1, [sp]
 8006b6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b70:	4628      	mov	r0, r5
 8006b72:	4621      	mov	r1, r4
 8006b74:	f7f9 fcb0 	bl	80004d8 <__aeabi_dmul>
 8006b78:	2222      	movs	r2, #34	; 0x22
 8006b7a:	b003      	add	sp, #12
 8006b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b80:	f7ff bfe1 	b.w	8006b46 <with_errno>
 8006b84:	4610      	mov	r0, r2
 8006b86:	4619      	mov	r1, r3
 8006b88:	e7ee      	b.n	8006b68 <xflow+0xe>

08006b8a <__math_uflow>:
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b90:	f7ff bfe3 	b.w	8006b5a <xflow>

08006b94 <__math_oflow>:
 8006b94:	2200      	movs	r2, #0
 8006b96:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006b9a:	f7ff bfde 	b.w	8006b5a <xflow>

08006b9e <with_errnof>:
 8006b9e:	b538      	push	{r3, r4, r5, lr}
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	460d      	mov	r5, r1
 8006ba4:	f7fe fd5e 	bl	8005664 <__errno>
 8006ba8:	6005      	str	r5, [r0, #0]
 8006baa:	4620      	mov	r0, r4
 8006bac:	bd38      	pop	{r3, r4, r5, pc}

08006bae <xflowf>:
 8006bae:	b508      	push	{r3, lr}
 8006bb0:	b140      	cbz	r0, 8006bc4 <xflowf+0x16>
 8006bb2:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8006bb6:	f7fa f8c5 	bl	8000d44 <__aeabi_fmul>
 8006bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006bbe:	2122      	movs	r1, #34	; 0x22
 8006bc0:	f7ff bfed 	b.w	8006b9e <with_errnof>
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	e7f6      	b.n	8006bb6 <xflowf+0x8>

08006bc8 <__math_uflowf>:
 8006bc8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8006bcc:	f7ff bfef 	b.w	8006bae <xflowf>

08006bd0 <__math_oflowf>:
 8006bd0:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8006bd4:	f7ff bfeb 	b.w	8006bae <xflowf>

08006bd8 <fabs>:
 8006bd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006bdc:	4770      	bx	lr

08006bde <finite>:
 8006bde:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006be2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006be6:	0fc0      	lsrs	r0, r0, #31
 8006be8:	4770      	bx	lr
 8006bea:	0000      	movs	r0, r0
 8006bec:	0000      	movs	r0, r0
	...

08006bf0 <scalbn>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	460d      	mov	r5, r1
 8006bfa:	4617      	mov	r7, r2
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	b996      	cbnz	r6, 8006c26 <scalbn+0x36>
 8006c00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c04:	4303      	orrs	r3, r0
 8006c06:	d039      	beq.n	8006c7c <scalbn+0x8c>
 8006c08:	4b33      	ldr	r3, [pc, #204]	; (8006cd8 <scalbn+0xe8>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f7f9 fc64 	bl	80004d8 <__aeabi_dmul>
 8006c10:	4b32      	ldr	r3, [pc, #200]	; (8006cdc <scalbn+0xec>)
 8006c12:	4604      	mov	r4, r0
 8006c14:	429f      	cmp	r7, r3
 8006c16:	460d      	mov	r5, r1
 8006c18:	da0f      	bge.n	8006c3a <scalbn+0x4a>
 8006c1a:	a32b      	add	r3, pc, #172	; (adr r3, 8006cc8 <scalbn+0xd8>)
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f7f9 fc5a 	bl	80004d8 <__aeabi_dmul>
 8006c24:	e006      	b.n	8006c34 <scalbn+0x44>
 8006c26:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006c2a:	4296      	cmp	r6, r2
 8006c2c:	d10a      	bne.n	8006c44 <scalbn+0x54>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	f7f9 fa9c 	bl	800016c <__adddf3>
 8006c34:	4604      	mov	r4, r0
 8006c36:	460d      	mov	r5, r1
 8006c38:	e020      	b.n	8006c7c <scalbn+0x8c>
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006c40:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006c44:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006c48:	19b9      	adds	r1, r7, r6
 8006c4a:	4291      	cmp	r1, r2
 8006c4c:	dd0e      	ble.n	8006c6c <scalbn+0x7c>
 8006c4e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006c52:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006c56:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006c5a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006c5e:	4820      	ldr	r0, [pc, #128]	; (8006ce0 <scalbn+0xf0>)
 8006c60:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006c64:	a31a      	add	r3, pc, #104	; (adr r3, 8006cd0 <scalbn+0xe0>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	e7d9      	b.n	8006c20 <scalbn+0x30>
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	dd08      	ble.n	8006c82 <scalbn+0x92>
 8006c70:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c78:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4629      	mov	r1, r5
 8006c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c82:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006c86:	da12      	bge.n	8006cae <scalbn+0xbe>
 8006c88:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006c8c:	429f      	cmp	r7, r3
 8006c8e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006c92:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006c96:	dcdc      	bgt.n	8006c52 <scalbn+0x62>
 8006c98:	a30b      	add	r3, pc, #44	; (adr r3, 8006cc8 <scalbn+0xd8>)
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006ca2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006ca6:	480f      	ldr	r0, [pc, #60]	; (8006ce4 <scalbn+0xf4>)
 8006ca8:	f041 011f 	orr.w	r1, r1, #31
 8006cac:	e7b8      	b.n	8006c20 <scalbn+0x30>
 8006cae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cb2:	3136      	adds	r1, #54	; 0x36
 8006cb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cb8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <scalbn+0xf8>)
 8006cc4:	e7ac      	b.n	8006c20 <scalbn+0x30>
 8006cc6:	bf00      	nop
 8006cc8:	c2f8f359 	.word	0xc2f8f359
 8006ccc:	01a56e1f 	.word	0x01a56e1f
 8006cd0:	8800759c 	.word	0x8800759c
 8006cd4:	7e37e43c 	.word	0x7e37e43c
 8006cd8:	43500000 	.word	0x43500000
 8006cdc:	ffff3cb0 	.word	0xffff3cb0
 8006ce0:	8800759c 	.word	0x8800759c
 8006ce4:	c2f8f359 	.word	0xc2f8f359
 8006ce8:	3c900000 	.word	0x3c900000

08006cec <fabsf>:
 8006cec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006cf0:	4770      	bx	lr

08006cf2 <finitef>:
 8006cf2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006cf6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006cfa:	bfac      	ite	ge
 8006cfc:	2000      	movge	r0, #0
 8006cfe:	2001      	movlt	r0, #1
 8006d00:	4770      	bx	lr
	...

08006d04 <scalbnf>:
 8006d04:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	460d      	mov	r5, r1
 8006d0e:	4604      	mov	r4, r0
 8006d10:	d02a      	beq.n	8006d68 <scalbnf+0x64>
 8006d12:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006d16:	d304      	bcc.n	8006d22 <scalbnf+0x1e>
 8006d18:	4601      	mov	r1, r0
 8006d1a:	f7f9 ff0b 	bl	8000b34 <__addsf3>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	e022      	b.n	8006d68 <scalbnf+0x64>
 8006d22:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8006d26:	d117      	bne.n	8006d58 <scalbnf+0x54>
 8006d28:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8006d2c:	f7fa f80a 	bl	8000d44 <__aeabi_fmul>
 8006d30:	4a17      	ldr	r2, [pc, #92]	; (8006d90 <scalbnf+0x8c>)
 8006d32:	4603      	mov	r3, r0
 8006d34:	4295      	cmp	r5, r2
 8006d36:	db0b      	blt.n	8006d50 <scalbnf+0x4c>
 8006d38:	4604      	mov	r4, r0
 8006d3a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006d3e:	3a19      	subs	r2, #25
 8006d40:	442a      	add	r2, r5
 8006d42:	2afe      	cmp	r2, #254	; 0xfe
 8006d44:	dd0a      	ble.n	8006d5c <scalbnf+0x58>
 8006d46:	4913      	ldr	r1, [pc, #76]	; (8006d94 <scalbnf+0x90>)
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f361 001e 	bfi	r0, r1, #0, #31
 8006d4e:	e000      	b.n	8006d52 <scalbnf+0x4e>
 8006d50:	4911      	ldr	r1, [pc, #68]	; (8006d98 <scalbnf+0x94>)
 8006d52:	f7f9 fff7 	bl	8000d44 <__aeabi_fmul>
 8006d56:	e7e2      	b.n	8006d1e <scalbnf+0x1a>
 8006d58:	0dd2      	lsrs	r2, r2, #23
 8006d5a:	e7f1      	b.n	8006d40 <scalbnf+0x3c>
 8006d5c:	2a00      	cmp	r2, #0
 8006d5e:	dd05      	ble.n	8006d6c <scalbnf+0x68>
 8006d60:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8006d64:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8006d68:	4618      	mov	r0, r3
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	f112 0f16 	cmn.w	r2, #22
 8006d70:	da05      	bge.n	8006d7e <scalbnf+0x7a>
 8006d72:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006d76:	4295      	cmp	r5, r2
 8006d78:	dce5      	bgt.n	8006d46 <scalbnf+0x42>
 8006d7a:	4907      	ldr	r1, [pc, #28]	; (8006d98 <scalbnf+0x94>)
 8006d7c:	e7e4      	b.n	8006d48 <scalbnf+0x44>
 8006d7e:	3219      	adds	r2, #25
 8006d80:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8006d84:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8006d88:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8006d8c:	e7e1      	b.n	8006d52 <scalbnf+0x4e>
 8006d8e:	bf00      	nop
 8006d90:	ffff3cb0 	.word	0xffff3cb0
 8006d94:	7149f2ca 	.word	0x7149f2ca
 8006d98:	0da24260 	.word	0x0da24260

08006d9c <_init>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr

08006da8 <_fini>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr
